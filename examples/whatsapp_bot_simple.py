#!/usr/bin/env python3
"""
Exemple simple d'int√©gration WhatsApp Business API avec l'API CSS
Ce script montre comment cr√©er un bot WhatsApp basique.
"""

import os
import json
import requests
from flask import Flask, request, jsonify
from datetime import datetime

app = Flask(__name__)

# Configuration - √Ä adapter selon votre environnement
WHATSAPP_TOKEN = os.getenv('WHATSAPP_TOKEN', 'votre_token_ici')
WHATSAPP_PHONE_ID = os.getenv('WHATSAPP_PHONE_ID', 'votre_phone_id_ici')
WEBHOOK_VERIFY_TOKEN = os.getenv('WEBHOOK_VERIFY_TOKEN', 'votre_verify_token')
CSS_API_URL = os.getenv('CSS_API_URL', 'http://localhost:8000')

class SimpleWhatsAppBot:
    def __init__(self):
        self.css_api_url = CSS_API_URL
        self.whatsapp_token = WHATSAPP_TOKEN
        self.phone_id = WHATSAPP_PHONE_ID
    
    def process_message(self, from_number, message_text, message_type='text'):
        """
        Traite un message WhatsApp entrant
        
        Args:
            from_number (str): Num√©ro de l'exp√©diteur
            message_text (str): Contenu du message
            message_type (str): Type de message (text, image, etc.)
        
        Returns:
            str: R√©ponse √† envoyer
        """
        try:
            # Log de l'interaction
            print(f"[{datetime.now()}] Message de {from_number}: {message_text}")
            
            # Traitement selon le type de message
            if message_type == 'text':
                return self._handle_text_message(message_text)
            else:
                return "D√©sol√©, je ne peux traiter que les messages texte pour le moment."
                
        except Exception as e:
            print(f"Erreur lors du traitement du message: {e}")
            return "D√©sol√©, une erreur s'est produite. Veuillez r√©essayer."
    
    def _handle_text_message(self, message_text):
        """
        Traite un message texte
        
        Args:
            message_text (str): Contenu du message
        
        Returns:
            str: R√©ponse g√©n√©r√©e
        """
        # Commandes sp√©ciales
        message_lower = message_text.lower().strip()
        
        if message_lower in ['bonjour', 'salut', 'hello', 'hi']:
            return self._get_welcome_message()
        elif message_lower in ['aide', 'help', '/aide', '/help']:
            return self._get_help_message()
        elif message_lower in ['menu', '/menu']:
            return self._get_menu_message()
        elif message_lower in ['contact', '/contact']:
            return self._get_contact_message()
        elif message_lower in ['merci', 'au revoir', 'bye']:
            return "Merci d'avoir utilis√© le service CSS ! N'h√©sitez pas √† revenir si vous avez d'autres questions. üòä"
        
        # Question normale - interroger l'API CSS
        return self._query_css_api(message_text)
    
    def _query_css_api(self, question):
        """
        Interroge l'API CSS avec la question de l'utilisateur
        
        Args:
            question (str): Question de l'utilisateur
        
        Returns:
            str: R√©ponse de l'API CSS ou message d'erreur
        """
        try:
            # Appel √† l'API CSS
            response = requests.post(
                f"{self.css_api_url}/ask-question-ultra",
                json={"question": question},
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                answer = data.get('answer', '')
                
                # Ajouter des informations contextuelles si disponibles
                context_info = ""
                if data.get('sources'):
                    context_info = "\n\nüìö Cette r√©ponse est bas√©e sur la documentation officielle CSS."
                
                return f"{answer}{context_info}"
            
            elif response.status_code == 404:
                return "D√©sol√©, je n'ai pas trouv√© d'informations sp√©cifiques √† votre question. Pourriez-vous la reformuler ?"
            
            else:
                return "Le service est temporairement indisponible. Veuillez r√©essayer dans quelques instants."
                
        except requests.exceptions.Timeout:
            return "La requ√™te a pris trop de temps. Veuillez r√©essayer avec une question plus simple."
        
        except requests.exceptions.ConnectionError:
            return "Impossible de se connecter au service CSS. Veuillez r√©essayer plus tard."
        
        except Exception as e:
            print(f"Erreur API CSS: {e}")
            return "Une erreur s'est produite lors du traitement de votre question. Veuillez r√©essayer."
    
    def _get_welcome_message(self):
        """Message de bienvenue"""
        return """üèõÔ∏è **Bienvenue sur le service d'assistance CSS !**

Je suis votre assistant virtuel pour toutes vos questions concernant la Caisse de S√©curit√© Sociale du S√©n√©gal.

üí¨ **Posez-moi directement vos questions**, par exemple :
‚Ä¢ "Comment faire une demande de pension ?"
‚Ä¢ "Quels sont les taux de cotisation ?"
‚Ä¢ "O√π puis-je retirer ma carte CSS ?"

üìã Tapez "menu" pour voir les cat√©gories
üÜò Tapez "aide" pour obtenir de l'aide

Comment puis-je vous aider aujourd'hui ?"""
    
    def _get_help_message(self):
        """Message d'aide"""
        return """üÜò **Aide - Comment utiliser ce service**

üí¨ **Posez vos questions directement** :
√âcrivez votre question en fran√ßais, je vous donnerai une r√©ponse bas√©e sur la documentation officielle CSS.

üìù **Exemples de questions** :
‚Ä¢ "Comment s'inscrire √† la CSS ?"
‚Ä¢ "Quel est le montant des cotisations ?"
‚Ä¢ "Comment faire une r√©clamation ?"
‚Ä¢ "Quels documents pour la retraite ?"

üîß **Commandes utiles** :
‚Ä¢ "menu" - Voir les cat√©gories
‚Ä¢ "contact" - Informations de contact
‚Ä¢ "aide" - Afficher cette aide

‚è∞ **Disponible 24h/24, 7j/7**"""
    
    def _get_menu_message(self):
        """Menu des cat√©gories"""
        return """üìã **Cat√©gories de questions CSS**

1Ô∏è‚É£ **Cotisations et Paiements**
   ‚Ä¢ Taux de cotisation
   ‚Ä¢ Modalit√©s de paiement
   ‚Ä¢ √âch√©ances et d√©lais

2Ô∏è‚É£ **Prestations et Allocations**
   ‚Ä¢ Pension de retraite
   ‚Ä¢ Prestations familiales
   ‚Ä¢ Indemnit√©s journali√®res

3Ô∏è‚É£ **Proc√©dures Administratives**
   ‚Ä¢ Inscription employeur/travailleur
   ‚Ä¢ Demandes de prestations
   ‚Ä¢ R√©clamations et recours

4Ô∏è‚É£ **Documents et Formulaires**
   ‚Ä¢ Pi√®ces justificatives
   ‚Ä¢ Attestations
   ‚Ä¢ Certificats

üí¨ **Choisissez une cat√©gorie ou posez directement votre question !**"""
    
    def _get_contact_message(self):
        """Informations de contact"""
        return """üìû **Contacts CSS - Caisse de S√©curit√© Sociale**

üè¢ **Si√®ge Social**
Adresse : Dakar, S√©n√©gal
T√©l√©phone : +221 33 XXX XX XX
Email : contact@css.sn

üïí **Horaires d'ouverture**
Lundi - Vendredi : 8h00 - 17h00
Samedi : 8h00 - 12h00
Dimanche : Ferm√©

üåê **Services en ligne**
‚Ä¢ Site web officiel CSS
‚Ä¢ Portail des assur√©s
‚Ä¢ Application mobile

üì± **Autres moyens de contact**
‚Ä¢ Service client t√©l√©phonique
‚Ä¢ Accueil physique dans nos agences
‚Ä¢ Courrier postal

üí¨ **Ce chatbot WhatsApp est disponible 24h/24 pour vos questions courantes !**"""
    
    def send_message(self, to_number, message_text):
        """
        Envoie un message via WhatsApp Business API
        
        Args:
            to_number (str): Num√©ro du destinataire
            message_text (str): Message √† envoyer
        
        Returns:
            bool: True si envoy√© avec succ√®s, False sinon
        """
        try:
            url = f"https://graph.facebook.com/v18.0/{self.phone_id}/messages"
            
            headers = {
                "Authorization": f"Bearer {self.whatsapp_token}",
                "Content-Type": "application/json"
            }
            
            # WhatsApp limite les messages √† 4096 caract√®res
            max_length = 4000
            
            if len(message_text) <= max_length:
                # Message simple
                payload = {
                    "messaging_product": "whatsapp",
                    "to": to_number,
                    "type": "text",
                    "text": {"body": message_text}
                }
                
                response = requests.post(url, headers=headers, json=payload)
                return response.status_code == 200
            
            else:
                # Message long - diviser en parties
                parts = [message_text[i:i+max_length] for i in range(0, len(message_text), max_length)]
                
                for i, part in enumerate(parts):
                    if i > 0:
                        part = f"(Suite {i+1}/{len(parts)})\n\n{part}"
                    
                    payload = {
                        "messaging_product": "whatsapp",
                        "to": to_number,
                        "type": "text",
                        "text": {"body": part}
                    }
                    
                    response = requests.post(url, headers=headers, json=payload)
                    if response.status_code != 200:
                        print(f"Erreur envoi partie {i+1}: {response.text}")
                        return False
                
                return True
                
        except Exception as e:
            print(f"Erreur lors de l'envoi du message: {e}")
            return False

# Instance globale du bot
bot = SimpleWhatsAppBot()

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    """
    Endpoint webhook pour recevoir les messages WhatsApp
    """
    if request.method == 'GET':
        # V√©rification du webhook par WhatsApp
        verify_token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')
        
        if verify_token == WEBHOOK_VERIFY_TOKEN:
            print("Webhook v√©rifi√© avec succ√®s")
            return challenge
        else:
            print("√âchec de la v√©rification du webhook")
            return 'Erreur de v√©rification', 403
    
    elif request.method == 'POST':
        # Traitement des messages entrants
        try:
            data = request.get_json()
            
            # V√©rifier si c'est un message entrant
            if 'entry' in data:
                for entry in data['entry']:
                    for change in entry.get('changes', []):
                        value = change.get('value', {})
                        
                        if 'messages' in value:
                            for message in value['messages']:
                                from_number = message['from']
                                
                                # Traiter selon le type de message
                                if message['type'] == 'text':
                                    message_text = message['text']['body']
                                    
                                    # G√©n√©rer la r√©ponse
                                    response_text = bot.process_message(
                                        from_number, 
                                        message_text, 
                                        'text'
                                    )
                                    
                                    # Envoyer la r√©ponse
                                    success = bot.send_message(from_number, response_text)
                                    
                                    if success:
                                        print(f"R√©ponse envoy√©e √† {from_number}")
                                    else:
                                        print(f"√âchec envoi √† {from_number}")
                                
                                else:
                                    # Type de message non support√©
                                    response_text = "D√©sol√©, je ne peux traiter que les messages texte pour le moment."
                                    bot.send_message(from_number, response_text)
            
            return jsonify({'status': 'success'})
            
        except Exception as e:
            print(f"Erreur lors du traitement du webhook: {e}")
            return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Endpoint de v√©rification de sant√©"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'css_api_url': CSS_API_URL
    })

@app.route('/test-message', methods=['POST'])
def test_message():
    """Endpoint pour tester l'envoi de messages (d√©veloppement uniquement)"""
    try:
        data = request.get_json()
        to_number = data.get('to')
        message = data.get('message')
        
        if not to_number or not message:
            return jsonify({'error': 'Param√®tres to et message requis'}), 400
        
        success = bot.send_message(to_number, message)
        
        return jsonify({
            'success': success,
            'message': 'Message envoy√©' if success else '√âchec envoi'
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ D√©marrage du bot WhatsApp CSS...")
    print(f"üì° CSS API URL: {CSS_API_URL}")
    print(f"üì± WhatsApp Phone ID: {WHATSAPP_PHONE_ID}")
    print("üåê Webhook disponible sur /webhook")
    
    # D√©marrage du serveur Flask
    app.run(
        host='0.0.0.0', 
        port=int(os.getenv('PORT', 5000)), 
        debug=os.getenv('DEBUG', 'False').lower() == 'true'
    )
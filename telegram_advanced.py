import os
import json
import asyncio
import logging
import aiohttp
import aiofiles
import hashlib
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from enum import Enum
from dataclasses import dataclass, asdict
from pathlib import Path

# Chargement des variables d'environnement
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv non install√© - variables d'environnement syst√®me utilis√©es")

try:
    from telegram import (
        Update, InlineKeyboardButton, InlineKeyboardMarkup,
        ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
        InputFile, Document, PhotoSize
    )
    from telegram.ext import (
        Application, CommandHandler, MessageHandler,
        CallbackQueryHandler, ContextTypes, filters,
        ConversationHandler
    )
    from telegram.constants import ParseMode, ChatAction
except ImportError:
    print("‚ùå Erreur: python-telegram-bot n'est pas install√©")
    print("üì¶ Installation: pip install python-telegram-bot aiohttp aiofiles")
    exit(1)

try:
    import redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False
    print("‚ö†Ô∏è Redis non disponible - utilisation du cache en m√©moire")

# Configuration
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '')
CSS_API_URL = os.getenv('CSS_API_URL', 'http://localhost:8000')
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')
DEBUG_MODE = os.getenv('DEBUG_MODE', 'false').lower() == 'true'
MAX_FILE_SIZE = int(os.getenv('MAX_FILE_SIZE', '20971520'))  # 20MB
CACHE_TTL = int(os.getenv('CACHE_TTL', '3600'))  # 1 heure

# Configuration du logging avec gestion robuste des erreurs
try:
    # Configuration du logging avec handlers personnalis√©s pour √©viter les erreurs de buffer
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.DEBUG if DEBUG_MODE else logging.INFO,
        handlers=[
            logging.StreamHandler(),  # Handler par d√©faut
        ],
        force=True  # Force la reconfiguration si d√©j√† configur√©
    )
except Exception as e:
    # Fallback en cas d'erreur de configuration du logging
    print(f"‚ö†Ô∏è Erreur de configuration du logging: {e}")
    logging.basicConfig(level=logging.INFO)

logger = logging.getLogger(__name__)

# D√©sactiver les logs verbeux de httpx pour √©viter les erreurs de buffer
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

# √âtats de conversation
class ConversationState(Enum):
    MAIN_MENU = "main_menu"
    ASKING_QUESTION = "asking_question"
    UPLOADING_DOCUMENT = "uploading_document"
    UPLOADING_IMAGE = "uploading_image"
    WAITING_MULTIMODAL_QUESTION = "waiting_multimodal_question"
    PROVIDING_FEEDBACK = "providing_feedback"

# Types de requ√™tes
class QueryType(Enum):
    STANDARD = "standard"
    STREAM = "stream"
    MULTIMODAL = "multimodal"
    MULTIMODAL_IMAGE = "multimodal_image"

@dataclass
class UserSession:
    """Gestion des sessions utilisateur"""
    user_id: int
    username: str
    state: ConversationState
    current_query_type: Optional[QueryType] = None
    uploaded_files: List[str] = None
    question_history: List[Dict] = None
    preferences: Dict[str, Any] = None
    created_at: datetime = None
    last_activity: datetime = None
    temp_question: Optional[str] = None  # Pour les questions en attente de traitement
    favorites: List[Dict] = None  # Pour les r√©ponses favorites
    
    def __post_init__(self):
        if self.uploaded_files is None:
            self.uploaded_files = []
        if self.question_history is None:
            self.question_history = []
        if self.preferences is None:
            self.preferences = {}
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.last_activity is None:
            self.last_activity = datetime.now()
        if self.favorites is None:
            self.favorites = []
        # Ajouter le champ pour les suggestions temporaires
        if not hasattr(self, 'temp_suggestions'):
            self.temp_suggestions = []

class CacheManager:
    """Gestionnaire de cache avec support Redis et fallback m√©moire"""
    
    def __init__(self):
        self.memory_cache = {}
        self.redis_client = None
        
        if REDIS_AVAILABLE:
            try:
                self.redis_client = redis.from_url(REDIS_URL, decode_responses=True)
                self.redis_client.ping()
                logger.info("‚úÖ Connexion Redis √©tablie")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de se connecter √† Redis: {e}")
                self.redis_client = None
    
    async def get(self, key: str) -> Optional[str]:
        """R√©cup√®re une valeur du cache"""
        try:
            if self.redis_client:
                return self.redis_client.get(key)
            else:
                return self.memory_cache.get(key)
        except Exception as e:
            logger.error(f"Erreur lecture cache: {e}")
            return None
    
    async def set(self, key: str, value: str, ttl: int = CACHE_TTL):
        """Stocke une valeur dans le cache"""
        try:
            if self.redis_client:
                self.redis_client.setex(key, ttl, value)
            else:
                # Nettoyage simple du cache m√©moire
                if len(self.memory_cache) > 1000:
                    # Garde seulement les 500 entr√©es les plus r√©centes
                    keys = list(self.memory_cache.keys())
                    for k in keys[:500]:
                        del self.memory_cache[k]
                
                self.memory_cache[key] = value
        except Exception as e:
            logger.error(f"Erreur √©criture cache: {e}")
    
    def generate_cache_key(self, query_type: str, question: str, files: List[str] = None) -> str:
        """G√©n√®re une cl√© de cache unique"""
        content = f"{query_type}:{question}"
        if files:
            content += f":{':'.join(files)}"
        return f"css_bot:{hashlib.md5(content.encode()).hexdigest()}"

class TelegramCSSBotAdvanced:
    """Bot Telegram avanc√© pour l'API CSS"""
    
    def __init__(self):
        self.css_api_url = CSS_API_URL
        self.cache_manager = CacheManager()
        self.user_sessions: Dict[int, UserSession] = {}
        self.feedback_data: List[Dict] = []
        
        # Statistiques globales
        self.stats = {
            'total_users': 0,
            'total_queries': 0,
            'successful_queries': 0,
            'failed_queries': 0,
            'multimodal_queries': 0,
            'stream_queries': 0,
            'start_time': datetime.now()
        }
    
    @staticmethod
    def clean_markdown_text(text: str) -> str:
        """Nettoie le texte pour √©viter les erreurs de parsing Markdown et corrige l'encodage"""
        if not text:
            return text
        
        # D√©coder les caract√®res Unicode √©chapp√©s AVANT le nettoyage
        if '\\u' in text:
            try:
                import codecs
                text = codecs.decode(text, 'unicode_escape')
            except (UnicodeDecodeError, UnicodeEncodeError):
                pass
        
        # Remplacer les caract√®res probl√©matiques pour Markdown
        cleaned = text.replace('`', "'").replace('*', '‚Ä¢').replace('_', '-')
        cleaned = cleaned.replace('[', '(').replace(']', ')')
        cleaned = cleaned.replace('\\', '/')
        
        # Limiter la longueur pour √©viter les messages trop longs
        if len(cleaned) > 3000:
            cleaned = cleaned[:3000] + "..."
        
        return cleaned
    
    def get_or_create_session(self, user_id: int, username: str = None) -> UserSession:
        """R√©cup√®re ou cr√©e une session utilisateur"""
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = UserSession(
                user_id=user_id,
                username=username or f"user_{user_id}",
                state=ConversationState.MAIN_MENU
            )
            self.stats['total_users'] += 1
        
        # Met √† jour l'activit√©
        self.user_sessions[user_id].last_activity = datetime.now()
        return self.user_sessions[user_id]
    
    def setup_handlers(self, application: Application):
        """Configure tous les gestionnaires du bot"""
        # Commandes principales
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("menu", self.menu_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("settings", self.settings_command))
        application.add_handler(CommandHandler("history", self.history_command))
        application.add_handler(CommandHandler("clear", self.clear_session_command))
        
        # Gestionnaires de callbacks
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # Gestionnaires de messages
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # Gestionnaire d'erreurs
        application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /start - Accueil du bot"""
        user = update.effective_user
        session = self.get_or_create_session(user.id, user.username)
        session.state = ConversationState.MAIN_MENU
        
        welcome_text = f"""ü§ñ **Salut {user.first_name} ! Bienvenue sur votre Assistant CSS IA**

üéØ **Je peux vous aider avec :**
‚Ä¢ üìö Questions sur les r√®glements CSS
‚Ä¢ üìã Proc√©dures administratives
‚Ä¢ üîç Recherche dans la documentation

üí° **Comment commencer ?**
1Ô∏è‚É£ Cliquez sur "üí¨ Question Standard" ci-dessous
2Ô∏è‚É£ Tapez votre question (ex: "Comment faire une demande de pension ?")
3Ô∏è‚É£ Recevez une r√©ponse d√©taill√©e instantan√©ment !

üåü **Astuce :** Utilisez "üåä Streaming" pour des r√©ponses progressives en temps r√©el

‚ö° **Raccourcis rapides :**
‚Ä¢ Tapez directement votre question
‚Ä¢ `/menu` - Retour au menu
‚Ä¢ `/help` - Guide complet
‚Ä¢ `/history` - Vos derni√®res questions

üëá **Choisissez une option pour commencer :**"""
        
        keyboard = self.get_main_menu_keyboard()
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    def get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """G√©n√®re le clavier du menu principal"""
        keyboard = [
            [
                InlineKeyboardButton("üí¨ Question Standard", callback_data="standard_query"),
                InlineKeyboardButton("üåä Question Streaming", callback_data="stream_query")
            ],
            # Fonctionnalit√©s temporairement d√©sactiv√©es
            # [
            #     InlineKeyboardButton("üìÑ Question + Document", callback_data="multimodal_query"),
            #     InlineKeyboardButton("üñºÔ∏è Question + Image", callback_data="image_query")
            # ],
            [
                InlineKeyboardButton("üìù Templates", callback_data="show_templates"),
                InlineKeyboardButton("‚≠ê Favoris", callback_data="show_favorites")
            ],
            [
                # InlineKeyboardButton("üìä Statistiques", callback_data="show_stats"),
                InlineKeyboardButton("üìö Historique", callback_data="show_history")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è Param√®tres", callback_data="show_settings"),
                InlineKeyboardButton("‚ùì Aide", callback_data="show_help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /menu - Affiche le menu principal"""
        text = "üè† **Menu Principal**\n\nChoisissez une option ci-dessous :"
        keyboard = self.get_main_menu_keyboard()
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /help - Aide d√©taill√©e"""
        help_text = """üìñ **Guide d'utilisation complet**

üöÄ **D√©marrage rapide :**
1. Tapez directement votre question ou utilisez le menu
2. Choisissez le mode de r√©ponse (Standard ou Streaming)
3. Consultez votre historique avec `/history`

üí¨ **Exemples de questions :**
‚Ä¢ "Quelles sont les conditions pour une pension de retraite ?"
‚Ä¢ "Comment faire une demande de pension de retraite ?"
‚Ä¢ "Proc√©dure pour obtenir un remboursement de soins"
‚Ä¢ "Comment d√©clarer un accident de travail ?"
‚Ä¢ "Calcul des cotisations sociales"

‚ö° **Commandes rapides :**
‚Ä¢ `/start` - Red√©marrer le bot
‚Ä¢ `/menu` - Menu principal
‚Ä¢ `/history` - Vos 10 derni√®res questions
‚Ä¢ `/settings` - Personnaliser vos pr√©f√©rences
‚Ä¢ `/clear` - Nouvelle session

üéØ **Modes de r√©ponse :**
‚Ä¢ **üí¨ Standard** : R√©ponse compl√®te instantan√©e
‚Ä¢ **üåä Streaming** : R√©ponse progressive (id√©al pour questions complexes)
‚Ä¢ **üìÑ Document** : Analysez vos fichiers PDF/TXT (max 20MB)
‚Ä¢ **üñºÔ∏è Image** : Analysez images et documents scann√©s (max 10MB)

üîß **Fonctionnalit√©s intelligentes :**
‚Ä¢ üß† Cache des r√©ponses pour une vitesse optimale
‚Ä¢ üìä Statistiques personnelles d'utilisation
‚Ä¢ üíæ Historique automatique des conversations
‚Ä¢ ‚≠ê Syst√®me de feedback pour am√©liorer les r√©ponses
‚Ä¢ üîÑ Sessions persistantes entre les utilisations

üí° **Conseils d'utilisation :**
‚Ä¢ Soyez pr√©cis dans vos questions pour de meilleurs r√©sultats
‚Ä¢ Utilisez le streaming pour les questions longues ou complexes
‚Ä¢ Consultez r√©guli√®rement votre historique
‚Ä¢ N'h√©sitez pas √† reformuler si la r√©ponse ne vous satisfait pas

üÜò **Probl√®me ?** Tapez `/clear` pour red√©marrer ou contactez l'administrateur."""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu"),
            InlineKeyboardButton("üìö Historique", callback_data="show_history")
        ]])
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /stats - Statistiques utilisateur"""
        user = update.effective_user
        session = self.get_or_create_session(user.id, user.username)
        
        # Statistiques utilisateur
        user_queries = len(session.question_history)
        successful_queries = sum(1 for q in session.question_history if q.get('success', False))
        
        # Statistiques globales
        uptime = datetime.now() - self.stats['start_time']
        success_rate = (self.stats['successful_queries'] / max(self.stats['total_queries'], 1)) * 100
        
        stats_text = f"""üìä **Vos Statistiques**

üë§ **Profil :**
‚Ä¢ Nom d'utilisateur : @{session.username}
‚Ä¢ Membre depuis : {session.created_at.strftime('%d/%m/%Y')}
‚Ä¢ Derni√®re activit√© : {session.last_activity.strftime('%d/%m/%Y %H:%M')}

üìà **Utilisation personnelle :**
‚Ä¢ Questions pos√©es : {user_queries}
‚Ä¢ Questions r√©ussies : {successful_queries}
‚Ä¢ Taux de succ√®s : {(successful_queries/max(user_queries, 1)*100):.1f}%
‚Ä¢ Mode streaming : {'‚úÖ Activ√©' if session.preferences.get('stream_mode') else '‚ùå D√©sactiv√©'}

üåê **Statistiques globales :**
‚Ä¢ Utilisateurs totaux : {self.stats['total_users']}
‚Ä¢ Requ√™tes totales : {self.stats['total_queries']}
‚Ä¢ Taux de succ√®s global : {success_rate:.1f}%
‚Ä¢ Temps de fonctionnement : {uptime.days}j {uptime.seconds//3600}h"""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
        ]])
        
        await update.message.reply_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /settings - Param√®tres utilisateur"""
        user = update.effective_user
        session = self.get_or_create_session(user.id, user.username)
        
        settings_text = f"""‚öôÔ∏è **Param√®tres**

üîß **Configuration actuelle :**
‚Ä¢ Mode streaming : {'‚úÖ Activ√©' if session.preferences.get('stream_mode') else '‚ùå D√©sactiv√©'}
‚Ä¢ Langue : {session.preferences.get('language', 'fr').upper()}
‚Ä¢ Notifications : ‚úÖ Activ√©es

üí° **Personnalisez votre exp√©rience !**"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üåä Streaming: {'ON' if session.preferences.get('stream_mode') else 'OFF'}",
                    callback_data="toggle_stream"
                )
            ],
            [
                InlineKeyboardButton("üóëÔ∏è Effacer le cache", callback_data="clear_cache"),
                InlineKeyboardButton("üìä Reset stats", callback_data="reset_stats")
            ],
            [
                InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
            ]
        ])
        
        await update.message.reply_text(
            settings_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /history - Historique des questions"""
        user = update.effective_user
        session = self.get_or_create_session(user.id, user.username)
        
        if not session.question_history:
            await update.message.reply_text(
                "üìö **Historique vide**\n\nVous n'avez encore pos√© aucune question.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # Affiche les 5 derni√®res questions
        recent_questions = session.question_history[-5:]
        history_text = "üìö **Historique r√©cent**\n\n"
        
        for i, entry in enumerate(recent_questions, 1):
            status = "‚úÖ" if entry.get('success') else "‚ùå"
            timestamp = entry.get('timestamp', 'N/A')
            question = entry.get('question', 'N/A')[:50] + ('...' if len(entry.get('question', '')) > 50 else '')
            
            history_text += f"{status} **{i}.** {question}\nüìÖ {timestamp}\n\n"
        
        history_text += f"üí° **Total : {len(session.question_history)} questions**"
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üóëÔ∏è Effacer l'historique", callback_data="clear_history"),
                InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
            ]
        ])
        
        await update.message.reply_text(
            history_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def clear_session_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Commande /clear - Efface la session utilisateur"""
        user = update.effective_user
        if user.id in self.user_sessions:
            del self.user_sessions[user.id]
        
        await update.message.reply_text(
            "üóëÔ∏è **Session effac√©e**\n\nVotre session a √©t√© r√©initialis√©e avec succ√®s.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Gestionnaire des callbacks des boutons inline"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        session = self.get_or_create_session(user.id, user.username)
        
        callback_data = query.data
        
        # Navigation principale
        if callback_data == "main_menu":
            await self.show_main_menu(query)
        elif callback_data == "standard_query":
            await self.start_standard_query(query, session)
        elif callback_data == "stream_query":
            await self.start_stream_query(query, session)
        elif callback_data == "multimodal_query":
            await self.start_multimodal_query(query, session)
        elif callback_data == "image_query":
            await self.start_image_query(query, session)
        elif callback_data == "show_stats":
            await self.show_stats_inline(query, session)
        elif callback_data == "show_history":
            await self.show_history_inline(query, session)
        elif callback_data == "show_settings":
            await self.show_settings_inline(query, session)
        elif callback_data == "show_help":
            await self.show_help_inline(query)
        elif callback_data == "show_templates":
            await self.show_templates_inline(query, session)
        elif callback_data == "show_favorites":
            await self.show_favorites_inline(query, session)
        elif callback_data == "toggle_stream":
            await self.toggle_stream_mode(query, session)
        elif callback_data == "toggle_default_mode":
            await self.toggle_default_mode(query, session)
        elif callback_data == "toggle_suggestions":
            await self.toggle_suggestions(query, session)
        elif callback_data == "toggle_notifications":
            await self.toggle_notifications(query, session)
        elif callback_data == "change_language":
            await self.change_language(query, session)
        elif callback_data == "change_theme":
            await self.change_theme(query, session)
        elif callback_data == "clear_cache":
            await self.clear_user_cache(query, session)
        elif callback_data == "reset_stats":
            await self.reset_user_stats(query, session)
        elif callback_data == "clear_history":
            await self.clear_user_history(query, session)
        elif callback_data.startswith("feedback_"):
            await self.handle_feedback_callback(query, session, callback_data)
        # Raccourcis rapides pour questions
        elif callback_data == "quick_standard":
            await self.handle_quick_question(query, session, QueryType.STANDARD)
        elif callback_data == "quick_stream":
            await self.handle_quick_question(query, session, QueryType.STREAM)
        # Templates et favoris
        elif callback_data.startswith("template_"):
            await self.handle_template_callback(query, session, callback_data)
        elif callback_data.startswith("favorite_"):
            await self.handle_favorite_callback(query, session, callback_data)
        # Gestion des suggestions d'auto-compl√©tion
        elif callback_data.startswith("suggest_"):
            await self.handle_suggestion_callback(query, session, callback_data)
        # Gestion des langues et th√®mes
        elif callback_data.startswith("set_lang_"):
            await self.handle_language_callback(query, session, callback_data)
        elif callback_data.startswith("set_theme_"):
            await self.handle_theme_callback(query, session, callback_data)
    
    async def handle_quick_question(self, query, session: UserSession, query_type: QueryType):
        """Traite une question rapide avec le type sp√©cifi√©"""
        if not session.temp_question:
            await query.edit_message_text(
                "‚ùå **Erreur** : Aucune question en attente.\n\nVeuillez poser une nouvelle question.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        question = session.temp_question
        session.temp_question = None  # Nettoyer la question temporaire
        session.current_query_type = query_type
        session.state = ConversationState.ASKING_QUESTION
        
        # Afficher un indicateur de progression
        progress_text = f"üîÑ **Traitement en cours...**\n\nüìù Question : _{question[:100]}{'...' if len(question) > 100 else ''}_\n\n‚è≥ Mode : {'üåä Streaming' if query_type == QueryType.STREAM else 'üí¨ Standard'}"
        
        await query.edit_message_text(
            progress_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Traiter la question selon le type
        if query_type == QueryType.STREAM:
            await self.call_stream_endpoint(query, question)
        else:
            try:
                response = await self.call_standard_endpoint(question, query.message)
                formatted_response = response  # call_standard_endpoint retourne d√©j√† une cha√Æne format√©e
                
                # Ajouter boutons de feedback
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üëç Utile", callback_data="feedback_positive"),
                        InlineKeyboardButton("üëé Pas utile", callback_data="feedback_negative")
                    ],
                    [
                        InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                    ]
                ])
                
                await self.send_long_message(query, formatted_response, edit=True)
                await query.message.reply_text(
                    "üí° Cette r√©ponse vous a-t-elle √©t√© utile ?",
                    reply_markup=keyboard
                )
                
                self.add_to_history(session, question, formatted_response, True)
                
            except Exception as e:
                logger.error(f"Erreur lors du traitement de la question rapide: {e}")
                try:
                    # Nettoyer le message d'erreur pour √©viter les probl√®mes de parsing Markdown
                    error_msg = self.clean_markdown_text(str(e))
                    await query.edit_message_text(
                        f"‚ùå **Erreur lors du traitement**\n\nUne erreur s'est produite. Veuillez r√©essayer.\n\nüîß **D√©tails:** {error_msg[:100]}...",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e2:
                    logger.error(f"Erreur lors de l'√©dition du message d'erreur: {e2}")
                    # Fallback sans markdown
                    try:
                        await query.edit_message_text(
                            f"‚ùå Erreur lors du traitement\n\nUne erreur s'est produite. Veuillez r√©essayer."
                        )
                    except Exception as e3:
                        logger.error(f"Impossible d'√©diter le message: {e3}")
                self.add_to_history(session, question, f"Erreur: {str(e)}", False)
        
        session.state = ConversationState.MAIN_MENU
    
    def get_smart_suggestions(self, text: str) -> List[str]:
        """G√©n√®re des suggestions intelligentes bas√©es sur le contenu du texte"""
        text_lower = text.lower()
        suggestions = []
        
        # Suggestions bas√©es sur les mots-cl√©s CSS/IPRES
        if any(word in text_lower for word in ['pension', 'retraite']):
            suggestions.extend([
                "Pr√©cisez votre √¢ge et ann√©es de cotisation",
                "Mentionnez votre secteur d'activit√© (public/priv√©)"
            ])
        elif any(word in text_lower for word in ['immatriculation', 'inscription']):
            suggestions.extend([
                "Indiquez votre statut (salari√©, employeur, ind√©pendant)",
                "Pr√©cisez votre secteur d'activit√©"
            ])
        elif any(word in text_lower for word in ['accident', 'travail', 'maladie']):
            suggestions.extend([
                "Mentionnez la date et les circonstances",
                "Pr√©cisez si vous avez consult√© un m√©decin"
            ])
        elif any(word in text_lower for word in ['remboursement', 'soins']):
            suggestions.extend([
                "Indiquez le type de soins re√ßus",
                "Pr√©cisez l'√©tablissement de soins"
            ])
        else:
            suggestions.extend([
                "Soyez plus sp√©cifique dans votre question",
                "Ajoutez des d√©tails sur votre situation"
            ])
        
        return suggestions[:3]
    
    def get_autocomplete_suggestions(self, text: str) -> List[str]:
        """G√©n√®re des suggestions d'auto-compl√©tion pour les textes courts"""
        text_lower = text.lower()
        
        # Templates de questions fr√©quentes
        templates = [
            "Comment faire une demande de pension de retraite ?",
            "Quelles sont les conditions pour b√©n√©ficier des prestations familiales ?",
            "Comment d√©clarer un accident de travail ?",
            "O√π puis-je retirer ma carte d'assur√© social ?",
            "Quels documents sont n√©cessaires pour l'immatriculation ?",
            "Comment obtenir un remboursement de soins m√©dicaux ?",
            "Quelles sont les d√©marches pour une pension d'invalidit√© ?",
            "Comment calculer mes cotisations sociales ?"
        ]
        
        # Filtrer les suggestions bas√©es sur le texte saisi
        if len(text) >= 2:
            filtered = [t for t in templates if any(word in t.lower() for word in text_lower.split())]
            if filtered:
                return filtered[:4]
        
        # Retourner les suggestions les plus populaires
        return templates[:4]
    
    async def handle_suggestion_callback(self, query, session: UserSession, callback_data: str):
        """G√®re les callbacks des suggestions d'auto-compl√©tion"""
        try:
            suggestion_index = int(callback_data.split('_')[1])
            if suggestion_index < len(session.temp_suggestions):
                selected_suggestion = session.temp_suggestions[suggestion_index]
                session.temp_question = selected_suggestion
                session.temp_suggestions = []  # Nettoyer les suggestions
                
                # Proposer les modes de r√©ponse
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üí¨ R√©ponse Standard", callback_data="quick_standard"),
                        InlineKeyboardButton("üåä Streaming", callback_data="quick_stream")
                    ],
                    [
                        InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                    ]
                ])
                
                await query.edit_message_text(
                    f"‚úÖ **Question s√©lectionn√©e :**\n\n_{selected_suggestion}_\n\nü§î Comment souhaitez-vous recevoir la r√©ponse ?",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
            else:
                await query.answer("‚ùå Suggestion non trouv√©e")
        except (ValueError, IndexError):
            await query.answer("‚ùå Erreur lors de la s√©lection")
    
    async def show_main_menu(self, query):
        """Affiche le menu principal"""
        text = "üè† **Menu Principal**\n\nChoisissez une option ci-dessous :"
        keyboard = self.get_main_menu_keyboard()
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Gestionnaire des messages texte avec raccourcis intelligents"""
        user = update.effective_user
        session = self.get_or_create_session(user.id, user.username)
        text = update.message.text.strip()
        
        # Gestion des √©tats sp√©ciaux
        if session.state == ConversationState.ASKING_QUESTION:
            await self.process_question(update, session, text)
            return
        elif session.state == ConversationState.WAITING_MULTIMODAL_QUESTION:
            await self.process_multimodal_question(update, session, text)
            return
        elif session.state == ConversationState.PROVIDING_FEEDBACK:
            await self.process_feedback(update, session, text)
            return
        
        # Raccourcis rapides (insensibles √† la casse)
        text_lower = text.lower()
        
        # Commandes raccourcies
        if text_lower in ['menu', 'm', 'üè†']:
            await self.menu_command(update, context)
            return
        elif text_lower in ['aide', 'help', 'h', '‚ùì', '?']:
            await self.help_command(update, context)
            return
        elif text_lower in ['historique', 'history', 'hist', 'üìö']:
            await self.history_command(update, context)
            return
        elif text_lower in ['parametres', 'settings', 'config', '‚öôÔ∏è']:
            await self.settings_command(update, context)
            return
        elif text_lower in ['stats', 'statistiques', 'üìä']:
            await self.stats_command(update, context)
            return
        elif text_lower in ['clear', 'reset', 'nouveau', 'effacer']:
            await self.clear_session_command(update, context)
            return
        
        # D√©tection automatique du type de question
        if len(text) > 10:  # Question probable
            # Si l'utilisateur est dans le menu principal (apr√®s /start), traiter automatiquement comme question standard
            if session.state == ConversationState.MAIN_MENU:
                # Traitement automatique en mode question standard
                session.current_query_type = QueryType.STANDARD
                session.state = ConversationState.ASKING_QUESTION
                
                # Afficher un indicateur de progression
                progress_text = f"üîÑ **Traitement automatique en cours...**\n\nüìù Question : _{text[:100]}{'...' if len(text) > 100 else ''}_\n\n‚è≥ Mode : üí¨ Question Standard"
                
                progress_message = await update.message.reply_text(
                    progress_text,
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # Traiter directement la question
                try:
                    response = await self.call_standard_endpoint(text, progress_message)
                    formatted_response = response  # call_standard_endpoint retourne d√©j√† une cha√Æne format√©e
                    
                    # Ajouter boutons de feedback
                    keyboard = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("üëç Utile", callback_data="feedback_positive"),
                            InlineKeyboardButton("üëé Pas utile", callback_data="feedback_negative")
                        ],
                        [
                            InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                        ]
                    ])
                    
                    await self.send_long_message(progress_message, formatted_response, edit=True)
                    await update.message.reply_text(
                        "üí° Cette r√©ponse vous a-t-elle √©t√© utile ?",
                        reply_markup=keyboard
                    )
                    
                    self.add_to_history(session, text, formatted_response, True)
                    
                except Exception as e:
                    logger.error(f"Erreur lors du traitement automatique de la question: {e}")
                    try:
                        # Nettoyer le message d'erreur pour √©viter les probl√®mes de parsing Markdown
                        error_msg = self.clean_markdown_text(str(e))
                        await progress_message.edit_text(
                            f"‚ùå **Erreur lors du traitement**\n\nUne erreur s'est produite. Veuillez r√©essayer.\n\nüîß **D√©tails:** {error_msg[:100]}...",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except Exception as e2:
                        logger.error(f"Erreur lors de l'√©dition du message d'erreur: {e2}")
                        await update.message.reply_text(
                            "‚ùå Une erreur s'est produite. Veuillez r√©essayer avec /start"
                        )
                return
            else:
                # Comportement normal pour les autres √©tats - proposer les modes de r√©ponse
                # G√©n√©rer des suggestions intelligentes
                smart_suggestions = self.get_smart_suggestions(text)
                suggestion_text = "\n".join(f"üí° {s}" for s in smart_suggestions[:2]) if smart_suggestions else ""
                
                # Proposer les modes de r√©ponse
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üí¨ R√©ponse Standard", callback_data="quick_standard"),
                        InlineKeyboardButton("üåä R√©ponse Streaming", callback_data="quick_stream")
                    ],
                    [
                        InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                    ]
                ])
                
                # Stocker la question pour traitement rapide
                session.temp_question = text
                
                message_text = f"üéØ **Question d√©tect√©e :**\n_{text[:100]}{'...' if len(text) > 100 else ''}_\n\nüí° **Choisissez le mode de r√©ponse :**"
                if suggestion_text:
                    message_text += f"\n\n**Suggestions pour am√©liorer votre question :**\n{suggestion_text}"
                
                await update.message.reply_text(
                    message_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
        else:
            # Auto-compl√©tion pour texte court
            suggestions = self.get_autocomplete_suggestions(text)
            
            keyboard_buttons = []
            for i, suggestion in enumerate(suggestions[:4]):
                keyboard_buttons.append([InlineKeyboardButton(f"üìù {suggestion[:50]}{'...' if len(suggestion) > 50 else ''}", callback_data=f"suggest_{i}")])
            
            keyboard_buttons.append([InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")])
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            # Stocker les suggestions dans la session
            session.temp_suggestions = suggestions[:4]
            
            await update.message.reply_text(
                f"ü§î **Votre message semble court**\n\n_{text}_\n\nüí° **Suggestions d'auto-compl√©tion :**",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Gestionnaire des documents upload√©s"""
        user = update.effective_user
        session = self.get_or_create_session(user.id, user.username)
        
        if session.state != ConversationState.UPLOADING_DOCUMENT:
            await update.message.reply_text(
                "üìÑ **Document re√ßu**\n\nPour analyser un document, utilisez l'option 'Question + Document' du menu principal.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        document = update.message.document
        
        # V√©rifications
        if document.file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                f"‚ùå **Fichier trop volumineux**\n\nTaille maximum autoris√©e : {MAX_FILE_SIZE//1024//1024}MB",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        if not document.file_name.lower().endswith(('.pdf', '.txt')):
            await update.message.reply_text(
                "‚ùå **Format non support√©**\n\nFormats accept√©s : PDF, TXT",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            # T√©l√©chargement du fichier
            file = await context.bot.get_file(document.file_id)
            file_path = f"temp_{user.id}_{document.file_name}"
            await file.download_to_drive(file_path)
            
            session.uploaded_files = [file_path]
            session.state = ConversationState.WAITING_MULTIMODAL_QUESTION
            
            await update.message.reply_text(
                f"‚úÖ **Document upload√© avec succ√®s !**\n\nüìÑ Fichier : {document.file_name}\nüìä Taille : {document.file_size//1024}KB\n\nüí¨ **Posez maintenant votre question sur ce document :**",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Erreur upload document: {e}")
            await update.message.reply_text(
                "‚ùå **Erreur lors de l'upload**\n\nVeuillez r√©essayer.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Gestionnaire des images upload√©es"""
        user = update.effective_user
        session = self.get_or_create_session(user.id, user.username)
        
        if session.state != ConversationState.UPLOADING_IMAGE:
            await update.message.reply_text(
                "üñºÔ∏è **Image re√ßue**\n\nPour analyser une image, utilisez l'option 'Question + Image' du menu principal.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # Prend la photo de meilleure qualit√©
        photo = update.message.photo[-1]
        
        if photo.file_size > MAX_FILE_SIZE:
            await update.message.reply_text(
                f"‚ùå **Image trop volumineuse**\n\nTaille maximum autoris√©e : {MAX_FILE_SIZE//1024//1024}MB",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            # T√©l√©chargement de l'image
            file = await context.bot.get_file(photo.file_id)
            file_path = f"temp_{user.id}_image.jpg"
            await file.download_to_drive(file_path)
            
            session.uploaded_files = [file_path]
            session.state = ConversationState.WAITING_MULTIMODAL_QUESTION
            
            await update.message.reply_text(
                f"‚úÖ **Image upload√©e avec succ√®s !**\n\nüñºÔ∏è Taille : {photo.file_size//1024}KB\nüìê Dimensions : {photo.width}x{photo.height}\n\nüí¨ **Posez maintenant votre question sur cette image :**",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Erreur upload image: {e}")
            await update.message.reply_text(
                "‚ùå **Erreur lors de l'upload**\n\nVeuillez r√©essayer.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def process_question(self, update: Update, session: UserSession, question: str):
        """Traite une question standard ou streaming"""
        await update.message.reply_chat_action(ChatAction.TYPING)
        
        # V√©rification du cache
        cache_key = self.cache_manager.generate_cache_key(
            session.current_query_type.value, question
        )
        cached_response = await self.cache_manager.get(cache_key)
        
        if cached_response:
            # Appliquer la correction Unicode aux r√©ponses en cache
            cached_response = self.fix_unicode_encoding(cached_response)
            await update.message.reply_text(
                f"{cached_response}",
                parse_mode=ParseMode.MARKDOWN
            )
            self.add_to_history(session, question, cached_response, True)
            session.state = ConversationState.MAIN_MENU
            return
        
        try:
            if session.current_query_type == QueryType.STREAM:
                await self.call_stream_endpoint(update, question)
                # Pour le streaming, l'historique est g√©r√© dans call_stream_endpoint
                session.state = ConversationState.MAIN_MENU
                return
            else:
                response, response_id = await self.call_standard_endpoint(question)
                
                # La fonction call_standard_endpoint retourne maintenant toujours une r√©ponse (succ√®s ou erreur)
                await self.send_long_message(update.message, response)
                
                # V√©rifier si c'est une r√©ponse d'erreur ou de succ√®s
                is_success = not (response.startswith("‚ùå") or response.startswith("üîå") or response.startswith("‚ö†Ô∏è"))
                
                if is_success:
                    # Mise en cache seulement pour les r√©ponses r√©ussies
                    await self.cache_manager.set(cache_key, response)
                    
                    # Boutons de feedback pour les r√©ponses r√©ussies
                    feedback_keyboard = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("üëç Utile", callback_data=f"feedback_good_{len(session.question_history)}"),
                            InlineKeyboardButton("üëé Pas utile", callback_data=f"feedback_bad_{len(session.question_history)}")
                        ],
                        [
                            InlineKeyboardButton("‚≠ê Ajouter aux favoris", callback_data=f"favorite_add_{len(session.question_history)}")
                        ],
                        [
                            InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                        ]
                    ])
                    
                    await update.message.reply_text(
                        "üí° Cette r√©ponse vous a-t-elle √©t√© utile ?",
                        reply_markup=feedback_keyboard
                    )
                
                # Ajout √† l'historique (succ√®s ou √©chec)
                self.add_to_history(session, question, response, is_success, response_id)
        
        except Exception as e:
            logger.error(f"Erreur traitement question: {e}")
            await update.message.reply_text(
                "‚ùå **Erreur inattendue**\n\nVeuillez r√©essayer plus tard.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        session.state = ConversationState.MAIN_MENU
    
    async def process_multimodal_question(self, update: Update, session: UserSession, question: str):
        """Traite une question multimodale (avec fichier)"""
        await update.message.reply_chat_action(ChatAction.TYPING)
        
        if not session.uploaded_files:
            await update.message.reply_text(
                "‚ùå **Aucun fichier upload√©**\n\nVeuillez d'abord uploader un fichier.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            if session.current_query_type == QueryType.MULTIMODAL_IMAGE:
                response = await self.call_multimodal_image_endpoint(question, session.uploaded_files)
            else:
                response = await self.call_multimodal_endpoint(question, session.uploaded_files)
            
            if response:
                # Appliquer la correction Unicode aux r√©ponses multimodales
                response = self.fix_unicode_encoding(response)
                await self.send_long_message(update.message, response)
                self.add_to_history(session, f"[Multimodal] {question}", response, True)
                self.stats['multimodal_queries'] += 1
                
                # Nettoyage des fichiers temporaires
                for file_path in session.uploaded_files:
                    try:
                        os.remove(file_path)
                    except:
                        pass
                
                session.uploaded_files = []
                
                # Boutons de feedback
                feedback_keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üëç Utile", callback_data=f"feedback_good_{len(session.question_history)-1}"),
                        InlineKeyboardButton("üëé Pas utile", callback_data=f"feedback_bad_{len(session.question_history)-1}")
                    ],
                    [
                        InlineKeyboardButton("‚≠ê Ajouter aux favoris", callback_data=f"favorite_add_{len(session.question_history)-1}")
                    ],
                    [
                        InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                    ]
                ])
                
                await update.message.reply_text(
                    "üí° Cette analyse vous a-t-elle √©t√© utile ?",
                    reply_markup=feedback_keyboard
                )
            else:
                await update.message.reply_text(
                    "‚ùå **Erreur lors de l'analyse**\n\nVeuillez r√©essayer.",
                    parse_mode=ParseMode.MARKDOWN
                )
                self.add_to_history(session, f"[Multimodal] {question}", "Erreur", False)
        
        except Exception as e:
            logger.error(f"Erreur traitement multimodal: {e}")
            await update.message.reply_text(
                "‚ùå **Erreur inattendue**\n\nVeuillez r√©essayer plus tard.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        session.state = ConversationState.MAIN_MENU
    
    async def start_standard_query(self, query, session: UserSession):
        """D√©marre une requ√™te standard"""
        session.state = ConversationState.ASKING_QUESTION
        session.current_query_type = QueryType.STANDARD
        
        text = """üí¨ **Question Standard**

Posez votre question et recevez une r√©ponse compl√®te !

üí° **Avantages :**
‚Ä¢ R√©ponse d√©taill√©e et structur√©e
‚Ä¢ Mise en cache pour acc√®s rapide
‚Ä¢ Sources et r√©f√©rences incluses

‚úçÔ∏è Tapez votre question ci-dessous :"""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Retour", callback_data="main_menu")
        ]])
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def start_stream_query(self, query, session: UserSession):
        """D√©marre une requ√™te en streaming"""
        session.state = ConversationState.ASKING_QUESTION
        session.current_query_type = QueryType.STREAM
        
        text = """üåä **Question Streaming**

Posez votre question et recevez la r√©ponse en temps r√©el !

‚ö° **Avantages :**
‚Ä¢ R√©ponse progressive
‚Ä¢ Feedback imm√©diat
‚Ä¢ Exp√©rience interactive

‚úçÔ∏è Tapez votre question ci-dessous :"""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Retour", callback_data="main_menu")
        ]])
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def start_multimodal_query(self, query, session: UserSession):
        """D√©marre une requ√™te multimodale"""
        session.state = ConversationState.UPLOADING_DOCUMENT
        session.current_query_type = QueryType.MULTIMODAL
        
        text = """üìÑ **Question + Document**

Uploadez un document PDF puis posez votre question.

üìã **Formats support√©s :**
‚Ä¢ PDF (max 20MB)
‚Ä¢ TXT (max 5MB)

üí° **Exemples d'usage :**
‚Ä¢ Analyser un formulaire CSS
‚Ä¢ Comprendre un document officiel
‚Ä¢ Extraire des informations sp√©cifiques

üìé Envoyez votre document maintenant :"""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Retour", callback_data="main_menu")
        ]])
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def start_image_query(self, query, session: UserSession):
        """D√©marre une requ√™te avec image"""
        session.state = ConversationState.UPLOADING_IMAGE
        session.current_query_type = QueryType.MULTIMODAL_IMAGE
        
        text = """üñºÔ∏è **Question + Image**

Envoyez une image puis posez votre question.

üé® **Formats support√©s :**
‚Ä¢ JPG, PNG, WEBP
‚Ä¢ Max 10MB

üí° **Exemples d'usage :**
‚Ä¢ Analyser un formulaire scann√©
‚Ä¢ Lire un document photographi√©
‚Ä¢ Identifier des √©l√©ments visuels

üì∏ Envoyez votre image maintenant :"""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô Retour", callback_data="main_menu")
        ]])
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def show_stats_inline(self, query, session: UserSession):
        """Affiche les statistiques en mode inline"""
        user_queries = len(session.question_history)
        successful_queries = sum(1 for q in session.question_history if q.get('success', False))
        
        uptime = datetime.now() - self.stats['start_time']
        success_rate = (self.stats['successful_queries'] / max(self.stats['total_queries'], 1)) * 100
        
        stats_text = f"""üìä **Statistiques**

üë§ **Votre profil :**
‚Ä¢ Questions pos√©es : {user_queries}
‚Ä¢ Questions r√©ussies : {successful_queries}
‚Ä¢ Taux de succ√®s : {(successful_queries/max(user_queries, 1)*100):.1f}%

üåê **Global :**
‚Ä¢ Utilisateurs : {self.stats['total_users']}
‚Ä¢ Requ√™tes totales : {self.stats['total_queries']}
‚Ä¢ Succ√®s global : {success_rate:.1f}%
‚Ä¢ Uptime : {uptime.days}j {uptime.seconds//3600}h"""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîÑ Actualiser", callback_data="show_stats"),
            InlineKeyboardButton("üè† Menu", callback_data="main_menu")
        ]])
        
        await query.edit_message_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def show_history_inline(self, query, session: UserSession):
        """Affiche l'historique en mode inline"""
        if not session.question_history:
            text = "üìö **Historique vide**\n\nVous n'avez encore pos√© aucune question."
        else:
            recent_questions = session.question_history[-3:]
            text = "üìö **Historique r√©cent**\n\n"
            
            for i, entry in enumerate(recent_questions, 1):
                status = "‚úÖ" if entry.get('success') else "‚ùå"
                question = entry.get('question', 'N/A')[:30] + ('...' if len(entry.get('question', '')) > 30 else '')
                text += f"{status} **{i}.** {question}\n"
            
            text += f"\nüí° **Total : {len(session.question_history)} questions**"
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üóëÔ∏è Effacer", callback_data="clear_history"),
                InlineKeyboardButton("üè† Menu", callback_data="main_menu")
            ]
        ])
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def show_settings_inline(self, query, session: UserSession):
        """Affiche les param√®tres en mode inline"""
        default_mode = session.preferences.get('default_query_mode', 'standard')
        auto_suggestions = session.preferences.get('auto_suggestions', True)
        notifications = session.preferences.get('notifications', True)
        
        text = f"""‚öôÔ∏è **Param√®tres**

üîß **Configuration :**
‚Ä¢ Streaming : {'‚úÖ ON' if session.preferences.get('stream_mode') else '‚ùå OFF'}
‚Ä¢ Mode par d√©faut : {default_mode.title()}
‚Ä¢ Suggestions auto : {'‚úÖ ON' if auto_suggestions else '‚ùå OFF'}
‚Ä¢ Notifications : {'‚úÖ ON' if notifications else '‚ùå OFF'}
‚Ä¢ Langue : {session.preferences.get('language', 'fr').upper()}
‚Ä¢ Cache : ‚úÖ Activ√©

üí° **Personnalisez votre exp√©rience !**"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üåä Streaming: {'ON' if session.preferences.get('stream_mode') else 'OFF'}",
                    callback_data="toggle_stream"
                ),
                InlineKeyboardButton(
                    f"üéØ Mode: {default_mode.title()}",
                    callback_data="toggle_default_mode"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üí° Suggestions: {'ON' if auto_suggestions else 'OFF'}",
                    callback_data="toggle_suggestions"
                ),
                InlineKeyboardButton(
                    f"üîî Notifications: {'ON' if notifications else 'OFF'}",
                    callback_data="toggle_notifications"
                )
            ],
            [
                InlineKeyboardButton("üåê Langue", callback_data="change_language"),
                InlineKeyboardButton("üé® Th√®me", callback_data="change_theme")
            ],
            [
                InlineKeyboardButton("üóëÔ∏è Effacer cache", callback_data="clear_cache"),
                InlineKeyboardButton("üìä Reset stats", callback_data="reset_stats")
            ],
            [
                InlineKeyboardButton("üè† Menu", callback_data="main_menu")
            ]
        ])
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def show_help_inline(self, query):
        """Affiche l'aide en mode inline"""
        help_text = """‚ùì **Aide rapide**

ü§ñ **Commandes :**
‚Ä¢ `/start` - D√©marrer
‚Ä¢ `/menu` - Menu principal
‚Ä¢ `/help` - Aide compl√®te
‚Ä¢ `/stats` - Statistiques
‚Ä¢ `/clear` - Reset session

üí° **Types de questions :**
‚Ä¢ **Standard** : R√©ponse compl√®te
‚Ä¢ **Streaming** : R√©ponse progressive
‚Ä¢ **Document** : Analyse PDF/TXT
‚Ä¢ **Image** : Analyse d'images

üìã **Formats :**
‚Ä¢ Documents : PDF, TXT (20MB max)
‚Ä¢ Images : JPG, PNG, WEBP (10MB max)

üîß **Fonctionnalit√©s :**
‚Ä¢ Cache intelligent
‚Ä¢ Historique des questions
‚Ä¢ Statistiques d'usage
‚Ä¢ Syst√®me de feedback"""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
        ]])
        
        await query.edit_message_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def show_templates_inline(self, query, session: UserSession):
        """Affiche les templates de questions pr√©d√©finies"""
        templates = {
            "pension_retraite": "Comment faire une demande de pension de retraite ?",
            "immatriculation": "Quelles sont les d√©marches pour l'immatriculation √† la s√©curit√© sociale ?",
            "accident_travail": "Comment d√©clarer un accident de travail ?",
            "maladie_professionnelle": "Quelles sont les proc√©dures pour une maladie professionnelle ?",
            "remboursement_soins": "Comment obtenir le remboursement de mes soins m√©dicaux ?",
            "cotisations": "Comment calculer mes cotisations sociales ?",
            "prestations_familiales": "Quelles sont les prestations familiales disponibles ?",
            "invalidite": "Comment faire une demande de pension d'invalidit√© ?",
            "deces": "Quelles sont les d√©marches en cas de d√©c√®s d'un assur√© ?",
            "documents_requis": "Quels documents sont n√©cessaires pour mes d√©marches ?"
        }
        
        keyboard = []
        for key, template in templates.items():
            # Tronquer le texte pour l'affichage du bouton
            button_text = template[:45] + "..." if len(template) > 45 else template
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"template_{key}")])
        
        keyboard.append([InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")])
        
        await query.edit_message_text(
            "üìù **Templates de Questions**\n\nChoisissez un template pour poser une question pr√©d√©finie :",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_favorites_inline(self, query, session: UserSession):
        """Affiche les r√©ponses favorites de l'utilisateur"""
        if not session.favorites:
            keyboard = [[InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")]]
            await query.edit_message_text(
                "‚≠ê **Favoris**\n\nVous n'avez encore aucune r√©ponse en favoris.\n\nPour ajouter une r√©ponse aux favoris, utilisez le bouton ‚≠ê qui appara√Æt apr√®s chaque r√©ponse.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        keyboard = []
        for i, favorite in enumerate(session.favorites[-10:]):  # Afficher les 10 derniers favoris
            question_preview = favorite['question'][:40] + "..." if len(favorite['question']) > 40 else favorite['question']
            keyboard.append([InlineKeyboardButton(f"üìå {question_preview}", callback_data=f"favorite_view_{i}")])
        
        keyboard.append([InlineKeyboardButton("üóëÔ∏è Vider les favoris", callback_data="favorite_clear")])
        keyboard.append([InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")])
        
        await query.edit_message_text(
            f"‚≠ê **Favoris** ({len(session.favorites)})\n\nVos r√©ponses favorites :",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def handle_template_callback(self, query, session: UserSession, callback_data: str):
        """G√®re les callbacks des templates"""
        template_key = callback_data.replace("template_", "")
        
        templates = {
            "pension_retraite": "Comment faire une demande de pension de retraite ?",
            "immatriculation": "Quelles sont les d√©marches pour l'immatriculation √† la s√©curit√© sociale ?",
            "accident_travail": "Comment d√©clarer un accident de travail ?",
            "maladie_professionnelle": "Quelles sont les proc√©dures pour une maladie professionnelle ?",
            "remboursement_soins": "Comment obtenir le remboursement de mes soins m√©dicaux ?",
            "cotisations": "Comment calculer mes cotisations sociales ?",
            "prestations_familiales": "Quelles sont les prestations familiales disponibles ?",
            "invalidite": "Comment faire une demande de pension d'invalidit√© ?",
            "deces": "Quelles sont les d√©marches en cas de d√©c√®s d'un assur√© ?",
            "documents_requis": "Quels documents sont n√©cessaires pour mes d√©marches ?"
        }
        
        if template_key in templates:
            question = templates[template_key]
            session.temp_question = question
            
            # Proposer le choix du mode de r√©ponse
            keyboard = [
                [
                    InlineKeyboardButton("üí¨ R√©ponse Standard", callback_data="quick_standard"),
                    InlineKeyboardButton("üåä R√©ponse Streaming", callback_data="quick_stream")
                ],
                [InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")]
            ]
            
            await query.edit_message_text(
                f"üìù **Question s√©lectionn√©e :**\n\n*{question}*\n\nChoisissez le mode de r√©ponse :",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    async def handle_favorite_callback(self, query, session: UserSession, callback_data: str):
        """G√®re les callbacks des favoris"""
        if callback_data.startswith("favorite_add_"):
            try:
                index = int(callback_data.replace("favorite_add_", ""))
                if 0 <= index < len(session.question_history):
                    history_item = session.question_history[index]
                    
                    # V√©rifier si d√©j√† en favoris
                    existing = any(fav['question'] == history_item['question'] for fav in session.favorites)
                    if existing:
                        await query.answer("Cette r√©ponse est d√©j√† dans vos favoris !")
                        return
                    
                    # Ajouter aux favoris
                    favorite = {
                        'question': history_item['question'],
                        'response': history_item['response'],
                        'timestamp': datetime.now().isoformat(),
                        'success': history_item.get('success', True)
                    }
                    session.favorites.append(favorite)
                    await query.answer("‚≠ê Ajout√© aux favoris !")
                else:
                    await query.answer("Question introuvable dans l'historique")
            except (ValueError, IndexError):
                await query.answer("Erreur lors de l'ajout aux favoris")
        elif callback_data == "favorite_clear":
            session.favorites = []
            await query.answer("Favoris vid√©s !")
            await self.show_favorites_inline(query, session)
        elif callback_data.startswith("favorite_view_"):
            try:
                index = int(callback_data.replace("favorite_view_", ""))
                if 0 <= index < len(session.favorites):
                    favorite = session.favorites[index]
                    
                    keyboard = [
                        [
                            InlineKeyboardButton("üóëÔ∏è Supprimer", callback_data=f"favorite_delete_{index}"),
                            InlineKeyboardButton("üîÑ Reposer la question", callback_data=f"favorite_reask_{index}")
                        ],
                        [InlineKeyboardButton("‚¨ÖÔ∏è Retour aux favoris", callback_data="show_favorites")]
                    ]
                    
                    text = f"‚≠ê **Favori**\n\n**Question :** {favorite['question']}\n\n**R√©ponse :**\n{favorite['response'][:1000]}{'...' if len(favorite['response']) > 1000 else ''}"
                    
                    await query.edit_message_text(
                        text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            except (ValueError, IndexError):
                await query.answer("Erreur lors de l'affichage du favori")
        elif callback_data.startswith("favorite_delete_"):
            try:
                index = int(callback_data.replace("favorite_delete_", ""))
                if 0 <= index < len(session.favorites):
                    session.favorites.pop(index)
                    await query.answer("Favori supprim√© !")
                    await self.show_favorites_inline(query, session)
            except (ValueError, IndexError):
                await query.answer("Erreur lors de la suppression")
        elif callback_data.startswith("favorite_reask_"):
            try:
                index = int(callback_data.replace("favorite_reask_", ""))
                if 0 <= index < len(session.favorites):
                    favorite = session.favorites[index]
                    session.temp_question = favorite['question']
                    
                    keyboard = [
                        [
                            InlineKeyboardButton("üí¨ R√©ponse Standard", callback_data="quick_standard"),
                            InlineKeyboardButton("üåä R√©ponse Streaming", callback_data="quick_stream")
                        ],
                        [InlineKeyboardButton("‚¨ÖÔ∏è Retour aux favoris", callback_data="show_favorites")]
                    ]
                    
                    await query.edit_message_text(
                        f"üîÑ **Reposer la question :**\n\n*{favorite['question']}*\n\nChoisissez le mode de r√©ponse :",
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            except (ValueError, IndexError):
                await query.answer("Erreur lors du rechargement de la question")
    
    async def toggle_stream_mode(self, query, session: UserSession):
        """Bascule le mode streaming"""
        current_mode = session.preferences.get('stream_mode', False)
        session.preferences['stream_mode'] = not current_mode
        
        status = "activ√©" if session.preferences['stream_mode'] else "d√©sactiv√©"
        await query.answer(f"Mode streaming {status} !")
        
        # Rafra√Æchit l'affichage des param√®tres
        await self.show_settings_inline(query, session)
    
    async def toggle_default_mode(self, query, session: UserSession):
        """Bascule le mode par d√©faut entre standard et stream"""
        current_mode = session.preferences.get('default_query_mode', 'standard')
        new_mode = 'stream' if current_mode == 'standard' else 'standard'
        session.preferences['default_query_mode'] = new_mode
        
        await query.answer(f"Mode par d√©faut: {new_mode.title()} !")
        await self.show_settings_inline(query, session)
    
    async def toggle_suggestions(self, query, session: UserSession):
        """Bascule les suggestions automatiques"""
        current_suggestions = session.preferences.get('auto_suggestions', True)
        session.preferences['auto_suggestions'] = not current_suggestions
        
        status = "activ√©es" if session.preferences['auto_suggestions'] else "d√©sactiv√©es"
        await query.answer(f"Suggestions automatiques {status} !")
        await self.show_settings_inline(query, session)
    
    async def toggle_notifications(self, query, session: UserSession):
        """Bascule les notifications"""
        current_notifications = session.preferences.get('notifications', True)
        session.preferences['notifications'] = not current_notifications
        
        status = "activ√©es" if session.preferences['notifications'] else "d√©sactiv√©es"
        await query.answer(f"Notifications {status} !")
        await self.show_settings_inline(query, session)
    
    async def change_language(self, query, session: UserSession):
        """Change la langue de l'interface"""
        current_lang = session.preferences.get('language', 'fr')
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üá´üá∑ Fran√ßais", callback_data="set_lang_fr"),
                InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")
            ],
            [
                InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="set_lang_es"),
                InlineKeyboardButton("üá©üá™ Deutsch", callback_data="set_lang_de")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Retour aux param√®tres", callback_data="show_settings")
            ]
        ])
        
        await query.edit_message_text(
            f"üåê **Changer la langue**\n\nLangue actuelle : {current_lang.upper()}\n\nChoisissez votre langue pr√©f√©r√©e :",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    
    async def change_theme(self, query, session: UserSession):
        """Change le th√®me de l'interface"""
        current_theme = session.preferences.get('theme', 'default')
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üåü Par d√©faut", callback_data="set_theme_default"),
                InlineKeyboardButton("üåô Sombre", callback_data="set_theme_dark")
            ],
            [
                InlineKeyboardButton("üåà Color√©", callback_data="set_theme_colorful"),
                InlineKeyboardButton("üíº Professionnel", callback_data="set_theme_professional")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è Retour aux param√®tres", callback_data="show_settings")
            ]
        ])
        
        await query.edit_message_text(
            f"üé® **Changer le th√®me**\n\nTh√®me actuel : {current_theme.title()}\n\nChoisissez votre th√®me pr√©f√©r√© :",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
     
    async def handle_language_callback(self, query, session: UserSession, callback_data: str):
        """G√®re les callbacks de changement de langue"""
        lang_code = callback_data.replace("set_lang_", "")
        lang_names = {
            'fr': 'Fran√ßais',
            'en': 'English', 
            'es': 'Espa√±ol',
            'de': 'Deutsch'
        }
        
        session.preferences['language'] = lang_code
        lang_name = lang_names.get(lang_code, lang_code.upper())
        
        await query.answer(f"Langue chang√©e: {lang_name} !")
        await self.show_settings_inline(query, session)
    
    async def handle_theme_callback(self, query, session: UserSession, callback_data: str):
        """G√®re les callbacks de changement de th√®me"""
        theme_code = callback_data.replace("set_theme_", "")
        theme_names = {
            'default': 'Par d√©faut',
            'dark': 'Sombre',
            'colorful': 'Color√©',
            'professional': 'Professionnel'
        }
        
        session.preferences['theme'] = theme_code
        theme_name = theme_names.get(theme_code, theme_code.title())
        
        await query.answer(f"Th√®me chang√©: {theme_name} !")
        await self.show_settings_inline(query, session)
     
    async def clear_user_cache(self, query, session: UserSession):
        """Efface le cache utilisateur"""
        # Ici on pourrait impl√©menter un nettoyage sp√©cifique au cache utilisateur
        await query.answer("Cache utilisateur effac√© !")
        
        await query.edit_message_text(
            "üóëÔ∏è **Cache effac√©**\n\nVotre cache personnel a √©t√© vid√©.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
            ]])
        )
    
    async def reset_user_stats(self, query, session: UserSession):
        """Remet √† z√©ro les statistiques utilisateur"""
        session.question_history = []
        await query.answer("Statistiques r√©initialis√©es !")
        
        await query.edit_message_text(
            "üìä **Statistiques r√©initialis√©es**\n\nVotre historique et vos stats ont √©t√© remis √† z√©ro.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
            ]])
        )
    
    async def clear_user_history(self, query, session: UserSession):
        """Efface l'historique utilisateur"""
        session.question_history = []
        await query.answer("Historique effac√© !")
        
        await query.edit_message_text(
            "üóëÔ∏è **Historique effac√©**\n\nVotre historique des questions a √©t√© vid√©.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
            ]])
        )
    
    async def handle_feedback_callback(self, query, session: UserSession, callback_data: str):
        """G√®re les callbacks de feedback"""
        parts = callback_data.split('_')
        if len(parts) >= 3:
            feedback_type = parts[1]  # 'good' ou 'bad'
            question_index = int(parts[2])
            
            if question_index < len(session.question_history):
                question_entry = session.question_history[question_index]
                response_id = question_entry.get('response_id')
                
                if response_id:
                    # Appelle l'endpoint /record-satisfaction
                    satisfaction = feedback_type == 'good'
                    success = await self.call_satisfaction_endpoint(response_id, satisfaction)
                    
                    if success:
                        # Marque le feedback dans l'historique local
                        session.question_history[question_index]['feedback'] = feedback_type
                        
                        feedback_text = "üëç Merci !" if feedback_type == 'good' else "üëé Merci pour votre retour !"
                        await query.answer(feedback_text)
                        
                        # Propose un feedback textuel pour les √©valuations n√©gatives
                        if feedback_type == 'bad':
                            session.state = ConversationState.PROVIDING_FEEDBACK
                            session.feedback_data = {'rating': feedback_type, 'question_index': question_index}
                            
                            await query.edit_message_text(
                                "üí¨ **Aidez-nous √† nous am√©liorer !**\n\nPouvez-vous nous dire ce qui n'a pas fonctionn√© ?\n\n‚úçÔ∏è Tapez votre commentaire :",
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("‚è≠Ô∏è Passer", callback_data="main_menu")
                                ]])
                            )
                        else:
                            await query.edit_message_text(
                                "‚úÖ **Merci pour votre feedback !**\n\nVotre √©valuation nous aide √† am√©liorer le service.",
                                parse_mode=ParseMode.MARKDOWN,
                                reply_markup=InlineKeyboardMarkup([[
                                    InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                                ]])
                            )
                    else:
                        # Erreur lors de l'enregistrement
                        await query.answer("‚ùå Erreur lors de l'enregistrement du feedback")
                        await query.edit_message_text(
                            "‚ùå **Erreur**\n\nImpossible d'enregistrer votre feedback. Veuillez r√©essayer plus tard.",
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                            ]])
                        )
                else:
                    # Pas de response_id disponible (ancienne r√©ponse)
                    await query.answer("‚ö†Ô∏è Feedback non disponible pour cette r√©ponse")
                    await query.edit_message_text(
                        "‚ö†Ô∏è **Feedback non disponible**\n\nCette r√©ponse ne supporte pas le feedback.",
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                        ]])
                    )
    
    async def process_feedback(self, update: Update, session: UserSession, feedback: str):
        """Traite le feedback textuel de l'utilisateur"""
        if hasattr(session, 'feedback_data'):
            session.feedback_data['text_feedback'] = feedback
            session.state = ConversationState.MAIN_MENU
            
            # Sauvegarde du feedback
            feedback_entry = {
                'user_id': session.user_id,
                'timestamp': datetime.now().isoformat(),
                'rating': session.feedback_data.get('rating'),
                'text_feedback': feedback,
                'question_index': session.feedback_data.get('question_index')
            }
            
            self.feedback_data.append(feedback_entry)
            
            await update.message.reply_text(
                "‚úÖ **Merci pour votre feedback d√©taill√© !**\n\nVos commentaires nous aident √† am√©liorer le service.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† Menu Principal", callback_data="main_menu")
                ]])
            )
        else:
            await update.message.reply_text(
                "üí° **Utilisez le menu pour naviguer !**\n\nTapez /menu pour voir les options disponibles.",
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def call_standard_endpoint(self, question: str, progress_message=None) -> tuple[str, str]:
        """Appelle l'endpoint ask-question-ultra avec indicateur de progression
        Retourne un tuple (response_text, response_id)
        """
        import time
        start_time = time.time()
        
        try:
            # Afficher l'indicateur de progression si fourni
            if progress_message:
                try:
                    await progress_message.edit_text(
                        f"üîÑ **Traitement en cours...**\n\nüìù Question : _{question[:100]}{'...' if len(question) > 100 else ''}_\n\n‚è≥ Connexion √† l'API CSS...",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except:
                    pass
            
            # Timeout plus long pour les requ√™tes complexes (60 secondes)
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
                if progress_message:
                    try:
                        await progress_message.edit_text(
                            f"üîÑ **Traitement en cours...**\n\nüìù Question : _{question[:100]}{'...' if len(question) > 100 else ''}_\n\n‚è≥ Envoi de la requ√™te...",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except:
                        pass
                
                async with session.post(
                    f"{self.css_api_url}/ask-question-ultra",
                    json={"question": question}
                ) as response:
                    if progress_message:
                        try:
                            await progress_message.edit_text(
                                f"üîÑ **Traitement en cours...**\n\nüìù Question : _{question[:100]}{'...' if len(question) > 100 else ''}_\n\n‚è≥ R√©ception de la r√©ponse...",
                                parse_mode=ParseMode.MARKDOWN
                            )
                        except:
                            pass
                    
                    if response.status == 200:
                        data = await response.json()
                        response_time = time.time() - start_time
                        logger.info(f"API standard r√©ussie en {response_time:.2f}s - Question: {question[:50]}...")
                        if response_time > 45.0:
                            logger.warning(f"Requ√™te API standard tr√®s lente (proche du timeout): {response_time:.2f}s - Question: {question[:50]}...")
                        elif response_time > 30.0:
                            logger.warning(f"Requ√™te API standard lente: {response_time:.2f}s - Question: {question[:50]}...")
                        self.stats['total_queries'] += 1
                        self.stats['successful_queries'] += 1
                        
                        # Extraire le response_id de la r√©ponse
                        response_id = data.get('response_id', '')

                        response_text = self.format_response(data)
                        # Appliquer la correction Unicode
                        response_text = self.fix_unicode_encoding(response_text)
                        return response_text, response_id
                    else:
                        error_text = await response.text()
                        response_time = time.time() - start_time
                        logger.error(f"Erreur API standard: {response.status} - {error_text} - Temps: {response_time:.2f}s")
                        self.stats['total_queries'] += 1
                        self.stats['failed_queries'] += 1
                        error_msg = f"‚ùå **Erreur API CSS (Code: {response.status})**\n\nL'API CSS a retourn√© une erreur. Veuillez r√©essayer plus tard.\n\nüîß **D√©tails techniques:** {error_text[:100]}..."
                        # D√©coder les caract√®res Unicode √©chapp√©s
                        error_msg = self.fix_unicode_encoding(error_msg)
                        return error_msg, ""
        except aiohttp.ClientConnectorError:
            response_time = time.time() - start_time
            logger.error(f"Impossible de se connecter √† l'API CSS: {self.css_api_url} - Temps: {response_time:.2f}s")
            self.stats['total_queries'] += 1
            self.stats['failed_queries'] += 1
            error_msg = f"üîå **API CSS non disponible**\n\nImpossible de se connecter √† l'API CSS.\n\nüîß **Solutions possibles:**\n‚Ä¢ V√©rifiez que l'API CSS est d√©marr√©e\n‚Ä¢ V√©rifiez l'URL: `{self.css_api_url}`\n‚Ä¢ Contactez l'administrateur syst√®me"
            # Utiliser la m√©thode de correction d'encodage
            error_msg = self.fix_unicode_encoding(error_msg)
            return error_msg, ""
        except aiohttp.ServerTimeoutError as e:
            response_time = time.time() - start_time
            logger.error(f"Timeout API standard: {e} - URL: {self.css_api_url} - Temps: {response_time:.2f}s")
            self.stats['total_queries'] += 1
            self.stats['failed_queries'] += 1
            error_msg = f"‚è±Ô∏è **Timeout API CSS**\n\nLa requ√™te a pris trop de temps (>30s).\n\nüîß **Solutions possibles:**\n‚Ä¢ R√©essayez avec une question plus simple\n‚Ä¢ V√©rifiez la charge du serveur\n‚Ä¢ Contactez l'administrateur si le probl√®me persiste"
            # D√©coder les caract√®res Unicode √©chapp√©s
            error_msg = self.fix_unicode_encoding(error_msg)
            return error_msg, ""
        except aiohttp.ClientError as e:
            response_time = time.time() - start_time
            logger.error(f"Erreur client HTTP API standard: {type(e).__name__}: {e} - URL: {self.css_api_url} - Temps: {response_time:.2f}s")
            self.stats['total_queries'] += 1
            self.stats['failed_queries'] += 1
            error_msg = f"üåê **Erreur de connexion**\n\nProbl√®me de communication avec l'API CSS.\n\nüîß **Type d'erreur:** {type(e).__name__}\n**D√©tails:** {str(e)[:100]}..."
            # D√©coder les caract√®res Unicode √©chapp√©s
            error_msg = self.fix_unicode_encoding(error_msg)
            return error_msg, ""
        except Exception as e:
            response_time = time.time() - start_time
            logger.error(f"Erreur appel API standard: {type(e).__name__}: {e} - URL: {self.css_api_url} - Temps: {response_time:.2f}s")
            logger.exception("Stack trace compl√®te:")
            self.stats['total_queries'] += 1
            self.stats['failed_queries'] += 1
            error_msg = f' Erreur technique. Une erreur inattendue s\'est produite. Type: {type(e).__name__} D√©tails: {str(e)[:100]}...'
            # D√©coder les caract√®res Unicode √©chapp√©s
            error_msg = self.fix_unicode_encoding(error_msg)
            return error_msg, ""
    
    async def call_satisfaction_endpoint(self, response_id: str, satisfaction: bool) -> bool:
        """Appelle l'endpoint /record-satisfaction pour enregistrer la satisfaction utilisateur"""
        try:
            satisfaction_url = f"{self.css_api_url}/record-satisfaction"
            
            payload = {
                "response_id": response_id,
                "satisfaction": satisfaction
            }
            
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                async with session.post(satisfaction_url, json=payload) as response:
                    if response.status == 200:
                        logger.info(f"Satisfaction enregistr√©e avec succ√®s: response_id={response_id}, satisfaction={satisfaction}")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"Erreur enregistrement satisfaction: {response.status} - {error_text}")
                        return False
                        
        except aiohttp.ClientConnectorError:
            logger.error(f"Impossible de se connecter √† l'API pour enregistrer la satisfaction: {self.css_api_url}")
            return False
        except aiohttp.ServerTimeoutError:
            logger.error(f"Timeout lors de l'enregistrement de la satisfaction")
            return False
        except Exception as e:
            logger.error(f"Erreur inattendue lors de l'enregistrement de la satisfaction: {type(e).__name__}: {e}")
            return False
     
    async def call_stream_endpoint(self, update: Update, question: str):
        """Appelle l'endpoint ask-question-stream-ultra avec streaming"""
        import time
        start_time = time.time()
        
        user_session = self.get_or_create_session(update.effective_user.id, update.effective_user.username)
        try:
            # Message initial
            message = await update.message.reply_text(
                "üîÑ **G√©n√©ration de la r√©ponse en cours...**",
                parse_mode=ParseMode.MARKDOWN
            )
            
            response_text = ""
            last_update_time = 0
            
            payload = {
                "question": question,
                "provider": "deepseek",
                "temperature": 0.3,
                "max_tokens": 512,
                "top_k": 3
            }
            
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as http_session:
                async with http_session.post(
                    f"{self.css_api_url}/ask-question-stream-ultra",
                    json=payload,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        async for line in response.content:
                            line_text = line.decode('utf-8').strip()
                            
                            if line_text.startswith("data: "):
                                try:
                                    data = json.loads(line_text[6:])
                                    
                                    # Gestion des chunks de contenu
                                    if data.get('type') == 'chunk' and 'content' in data:
                                        # MODIFICATION CRITIQUE : D√©coder chaque chunk
                                        chunk_content = self.fix_unicode_encoding(data['content'])
                                        response_text += chunk_content
                                        
                                        # Mise √† jour du message toutes les 2 secondes ou tous les 50 caract√®res
                                        current_time = asyncio.get_event_loop().time()
                                        if (current_time - last_update_time > 2.0 or 
                                            len(response_text) - len(response_text.split('\n')[-1]) > 50):
                                            
                                            try:
                                                # Le texte est d√©j√† d√©cod√©, pas besoin de re-d√©coder
                                                await message.edit_text(
                                                    f"üåä **R√©ponse en cours...**\n\n{response_text}{'‚ñå' if len(response_text) < 500 else ''}",
                                                    parse_mode=ParseMode.MARKDOWN
                                                )
                                                last_update_time = current_time
                                            except Exception as edit_error:
                                                # Ignore les erreurs d'√©dition (message identique, etc.)
                                                pass
                                    
                                    # Gestion des erreurs
                                    elif data.get('type') == 'error':
                                        error_msg = data.get('error', 'Erreur inconnue')
                                        error_msg = self.fix_unicode_encoding(error_msg)
                                        await message.edit_text(
                                            f"‚ùå **Erreur lors du streaming**\n\n{error_msg}",
                                            parse_mode=ParseMode.MARKDOWN
                                        )
                                        self.stats['total_queries'] += 1
                                        self.stats['failed_queries'] += 1
                                        return
                                        
                                except json.JSONDecodeError:
                                    continue
                        
                        # Message final
                        if response_text.strip():
                            # Le texte a d√©j√† √©t√© d√©cod√© chunk par chunk, une correction finale
                            response_text = self.fix_unicode_encoding(response_text)
                            
                            # V√©rifier si c'est un message d'erreur
                            if response_text.startswith(("‚ùå", "üîå", "‚ö†Ô∏è")):
                                await message.edit_text(
                                    response_text,
                                    parse_mode=ParseMode.MARKDOWN
                                )
                                self.stats['total_queries'] += 1
                                self.stats['failed_queries'] += 1
                                
                                # Ajout √† l'historique pour les erreurs
                                self.add_to_history(user_session, question, response_text, False)
                            else:
                                # R√©ponse r√©ussie - ajouter les boutons de feedback
                                keyboard = InlineKeyboardMarkup([
                                    [
                                        InlineKeyboardButton("üëç Utile", callback_data="feedback_positive"),
                                        InlineKeyboardButton("üëé Pas utile", callback_data="feedback_negative")
                                    ],
                                    [InlineKeyboardButton("üîô Menu Principal", callback_data="main_menu")]
                                ])
                                
                                await message.edit_text(
                                    f"‚úÖ **R√©ponse compl√®te**\n\n{response_text}",
                                    parse_mode=ParseMode.MARKDOWN,
                                    reply_markup=keyboard
                                )
                                
                                response_time = time.time() - start_time
                                logger.info(f"API streaming r√©ussie en {response_time:.2f}s - Question: {question[:50]}...")
                                
                                self.stats['total_queries'] += 1
                                self.stats['successful_queries'] += 1
                                
                                # Mise en cache
                                cache_key = self.cache_manager.generate_cache_key("stream", question)
                                await self.cache_manager.set(cache_key, response_text)
                                
                                # Ajout √† l'historique
                                self.add_to_history(user_session, question, response_text, True)

                        else:
                            response_time = time.time() - start_time
                            logger.warning(f"Streaming termin√© sans contenu en {response_time:.2f}s - Question: {question[:50]}...")
                            await message.edit_text(
                                "‚ö†Ô∏è **Aucune r√©ponse re√ßue**\n\nLe streaming s'est termin√© sans contenu.",
                                parse_mode=ParseMode.MARKDOWN
                            )
                            self.stats['total_queries'] += 1
                            self.stats['failed_queries'] += 1
                    else:
                        error_text = await response.text()
                        response_time = time.time() - start_time
                        logger.error(f"Erreur API streaming: {response.status} - {error_text} - Temps: {response_time:.2f}s")
                        error_msg = f"‚ùå **Erreur API CSS (Code: {response.status})**\n\nL'API CSS a retourn√© une erreur. Veuillez r√©essayer plus tard.\n\nüîß **D√©tails techniques:** {error_text[:100]}..."
                        # D√©coder les caract√®res Unicode √©chapp√©s
                        try:
                            error_msg = error_msg.encode().decode('unicode_escape')
                        except (UnicodeDecodeError, UnicodeEncodeError):
                            pass
                        await message.edit_text(
                            error_msg,
                            parse_mode=ParseMode.MARKDOWN
                        )
                        self.stats['total_queries'] += 1
                        self.stats['failed_queries'] += 1
                        
        except aiohttp.ClientConnectorError:
            response_time = time.time() - start_time
            logger.error(f"Impossible de se connecter √† l'API CSS: {self.css_api_url} - Temps: {response_time:.2f}s")
            error_msg = "üîå **API CSS indisponible**\n\nImpossible de se connecter au service CSS.\n\nüí° **Solutions possibles:**\n‚Ä¢ V√©rifiez que l'API CSS est d√©marr√©e\n‚Ä¢ Contactez l'administrateur si le probl√®me persiste"
            # Utiliser la m√©thode de correction d'encodage
            error_msg = self.fix_unicode_encoding(error_msg)
            await message.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            self.stats['total_queries'] += 1
            self.stats['failed_queries'] += 1
        except aiohttp.ServerTimeoutError as e:
            response_time = time.time() - start_time
            logger.error(f"Timeout API streaming: {e} - URL: {self.css_api_url} - Temps: {response_time:.2f}s")
            error_msg = f"‚è±Ô∏è **Timeout API CSS**\n\nLa requ√™te streaming a pris trop de temps.\n\nüîß **Solutions possibles:**\n‚Ä¢ R√©essayez avec une question plus simple\n‚Ä¢ V√©rifiez la charge du serveur\n‚Ä¢ Contactez l'administrateur si le probl√®me persiste"
            # D√©coder les caract√®res Unicode √©chapp√©s
            try:
                error_msg = error_msg.encode().decode('unicode_escape')
            except (UnicodeDecodeError, UnicodeEncodeError):
                pass
            await message.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            self.stats['total_queries'] += 1
            self.stats['failed_queries'] += 1
        except aiohttp.ClientError as e:
            response_time = time.time() - start_time
            logger.error(f"Erreur client HTTP API streaming: {type(e).__name__}: {e} - URL: {self.css_api_url} - Temps: {response_time:.2f}s")
            error_msg = f"üåê **Erreur de connexion**\n\nProbl√®me de communication avec l'API CSS.\n\nüîß **Type d'erreur:** {type(e).__name__}\n**D√©tails:** {str(e)[:100]}..."
            # D√©coder les caract√®res Unicode √©chapp√©s
            try:
                error_msg = error_msg.encode().decode('unicode_escape')
            except (UnicodeDecodeError, UnicodeEncodeError):
                pass
            await message.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            self.stats['total_queries'] += 1
            self.stats['failed_queries'] += 1
        except Exception as e:
            response_time = time.time() - start_time
            logger.error(f"Erreur appel API streaming: {type(e).__name__}: {e} - URL: {self.css_api_url} - Temps: {response_time:.2f}s")
            logger.exception("Stack trace compl√®te:")
            error_msg = f'Erreur technique. Une erreur inattendue s\'est produite. Type: {type(e).__name__} D√©tails: {str(e)[:100]}...'
            # D√©coder les caract√®res Unicode √©chapp√©s
            try:
                # error_msg = error_msg.encode().decode('unicode_escape')
                # error_msg = error_msg.encode().decode('unicode_escape')
                pass
            except (UnicodeDecodeError, UnicodeEncodeError):
                pass
            await message.edit_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN
            )
            self.stats['total_queries'] += 1
            self.stats['failed_queries'] += 1
    
    def fix_unicode_encoding(self, text: str) -> str:
        """Corrige les probl√®mes d'encodage Unicode dans le texte"""
        if not text or not isinstance(text, str):
            return text
            
        try:
            import json
            import re
            
            # NOUVEAU: D√©tecter si le texte est une cha√Æne JSON s√©rialis√©e accidentellement
            # (commence et finit par des guillemets)
            if text.startswith('"') and text.endswith('"') and len(text) > 2:
                try:
                    # D√©s√©rialiser la cha√Æne JSON
                    decoded_text = json.loads(text)
                    text = decoded_text
                except json.JSONDecodeError:
                    # Si √ßa √©choue, enlever juste les guillemets
                    text = text[1:-1]
            
            # M√©thode 1: Utiliser json.loads pour d√©coder les s√©quences Unicode
            # Entourer le texte de guillemets pour en faire un JSON valide
            if '\\u' in text:
                json_text = '"' + text.replace('"', '\\"') + '"'
                try:
                    decoded_text = json.loads(json_text)
                    return decoded_text
                except json.JSONDecodeError:
                    pass
            
            # M√©thode 2: Utiliser une expression r√©guli√®re pour remplacer les s√©quences \uXXXX
            def unicode_replacer(match):
                hex_code = match.group(1)
                try:
                    return chr(int(hex_code, 16))
                except ValueError:
                    return match.group(0)  # Retourner la s√©quence originale si erreur
            
            # Remplacer toutes les s√©quences \uXXXX
            text = re.sub(r'\\u([0-9a-fA-F]{4})', unicode_replacer, text)
            
            # √âtape 2: D√©coder les s√©quences d'√©chappement courantes
            text = text.replace('\\n', '\n')
            text = text.replace('\\t', '\t')
            text = text.replace('\\r', '\r')
            text = text.replace('\\"', '"')
            text = text.replace("\\\'", "'")
            

                
        except Exception as e:
            logger.warning(f"Erreur de d√©codage Unicode: {e}")
            # En cas d'erreur, essayer une approche alternative
            try:
                # Approche alternative : remplacer manuellement les s√©quences courantes
                replacements = {
                    '\\u00e0': '√†', '\\u00e1': '√°', '\\u00e2': '√¢', '\\u00e3': '√£',
                    '\\u00e4': '√§', '\\u00e5': '√•', '\\u00e6': '√¶', '\\u00e7': '√ß',
                    '\\u00e8': '√®', '\\u00e9': '√©', '\\u00ea': '√™', '\\u00eb': '√´',
                    '\\u00ec': '√¨', '\\u00ed': '√≠', '\\u00ee': '√Æ', '\\u00ef': '√Ø',
                    '\\u00f0': '√∞', '\\u00f1': '√±', '\\u00f2': '√≤', '\\u00f3': '√≥',
                    '\\u00f4': '√¥', '\\u00f5': '√µ', '\\u00f6': '√∂', '\\u00f8': '√∏',
                    '\\u00f9': '√π', '\\u00fa': '√∫', '\\u00fb': '√ª', '\\u00fc': '√º',
                    '\\u00fd': '√Ω', '\\u00ff': '√ø',
                    # Majuscules
                    '\\u00c0': '√Ä', '\\u00c1': '√Å', '\\u00c2': '√Ç', '\\u00c3': '√É',
                    '\\u00c4': '√Ñ', '\\u00c5': '√Ö', '\\u00c6': '√Ü', '\\u00c7': '√á',
                    '\\u00c8': '√à', '\\u00c9': '√â', '\\u00ca': '√ä', '\\u00cb': '√ã',
                    '\\u00cc': '√å', '\\u00cd': '√ç', '\\u00ce': '√é', '\\u00cf': '√è',
                    '\\u00d1': '√ë', '\\u00d2': '√í', '\\u00d3': '√ì', '\\u00d4': '√î',
                    '\\u00d5': '√ï', '\\u00d6': '√ñ', '\\u00d8': '√ò', '\\u00d9': '√ô',
                    '\\u00da': '√ö', '\\u00db': '√õ', '\\u00dc': '√ú', '\\u00dd': '√ù',
                }
                
                for escaped, char in replacements.items():
                    text = text.replace(escaped, char)
                    
                # Nettoyer les s√©quences d'√©chappement restantes
                text = text.replace('\\n', '\n').replace('\\t', '\t').replace('\\r', '\r')
                
            except Exception as e2:
                logger.error(f"√âchec de l'approche alternative pour l'Unicode: {e2}")
        
        return text
    
    def format_response(self, response_data: dict) -> str:
        """Formate la r√©ponse de l'API pour l'affichage avec d√©codage des caract√®res Unicode"""
        response_text = ""
        
        if isinstance(response_data, dict):
            if 'response' in response_data:
                response_text = response_data['response']
            elif 'answer' in response_data:
                response_text = response_data['answer']
            elif 'result' in response_data:
                response_text = response_data['result']
            else:
                response_text = str(response_data)
        else:
            response_text = str(response_data)
        
        # OBLIGATOIRE : Appliquer la correction Unicode
        response_text = self.fix_unicode_encoding(response_text)
        
        return response_text
    
    async def send_long_message(self, message_or_query, text: str, edit: bool = False):
        """Envoie un message long en le divisant si n√©cessaire"""
        # AJOUT OBLIGATOIRE : Corriger l'encodage Unicode avant l'envoi
        text = self.fix_unicode_encoding(text)
        
        max_length = 4096  # Limite Telegram
        
        # D√©terminer si c'est un CallbackQuery ou un Message
        is_callback = hasattr(message_or_query, 'edit_message_text')
        
        if len(text) <= max_length:
            try:
                if edit and is_callback:
                    await message_or_query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
                elif edit:
                    await message_or_query.edit_text(text, parse_mode=ParseMode.MARKDOWN)
                elif is_callback:
                    await message_or_query.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
                else:
                    await message_or_query.reply_text(text, parse_mode=ParseMode.MARKDOWN)
            except Exception as e:
                logger.warning(f"Erreur parsing Markdown: {e}")
                # Fallback sans markdown si erreur de parsing
                try:
                    if edit and is_callback:
                        await message_or_query.edit_message_text(text)
                    elif edit:
                        await message_or_query.edit_text(text)
                    elif is_callback:
                        await message_or_query.message.reply_text(text)
                    else:
                        await message_or_query.reply_text(text)
                except Exception as e2:
                    logger.error(f"Erreur envoi message: {e2}")
        else:
            # Divise le message en chunks
            chunks = [text[i:i+max_length] for i in range(0, len(text), max_length)]
            
            for i, chunk in enumerate(chunks):
                try:
                    if i == 0 and edit and is_callback:
                        await message_or_query.edit_message_text(f"üìÑ **Partie {i+1}/{len(chunks)}**\n\n{chunk}", parse_mode=ParseMode.MARKDOWN)
                    elif i == 0 and edit:
                        await message_or_query.edit_text(f"üìÑ **Partie {i+1}/{len(chunks)}**\n\n{chunk}", parse_mode=ParseMode.MARKDOWN)
                    elif is_callback:
                        await message_or_query.message.reply_text(f"üìÑ **Partie {i+1}/{len(chunks)}**\n\n{chunk}", parse_mode=ParseMode.MARKDOWN)
                    else:
                        await message_or_query.reply_text(f"üìÑ **Partie {i+1}/{len(chunks)}**\n\n{chunk}", parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    logger.warning(f"Erreur parsing Markdown chunk {i+1}: {e}")
                    # Fallback sans markdown
                    try:
                        if i == 0 and edit and is_callback:
                            await message_or_query.edit_message_text(f"Partie {i+1}/{len(chunks)}\n\n{chunk}")
                        elif i == 0 and edit:
                            await message_or_query.edit_text(f"Partie {i+1}/{len(chunks)}\n\n{chunk}")
                        elif is_callback:
                            await message_or_query.message.reply_text(f"Partie {i+1}/{len(chunks)}\n\n{chunk}")
                        else:
                            await message_or_query.reply_text(f"Partie {i+1}/{len(chunks)}\n\n{chunk}")
                    except Exception as e2:
                        logger.error(f"Erreur envoi chunk {i+1}: {e2}")
                
                # Pause entre les messages pour √©viter le rate limiting
                if i < len(chunks) - 1:
                    await asyncio.sleep(1)
    
    def add_to_history(self, session: UserSession, question: str, response: str, success: bool, response_id: str = None):
        """Ajoute une entr√©e √† l'historique des questions"""
        entry = {
            'timestamp': datetime.now().strftime('%d/%m/%Y %H:%M'),
            'question': question,
            'response': response,
            'success': success,
            'query_type': session.current_query_type.value if session.current_query_type else 'unknown',
            'response_id': response_id
        }
        
        session.question_history.append(entry)
        
        # Limite l'historique √† 50 entr√©es
        if len(session.question_history) > 50:
            session.question_history = session.question_history[-50:]
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """Gestionnaire d'erreurs global"""
        logger.error(f"Exception lors de la mise √† jour {update}: {context.error}")
        
        if isinstance(update, Update) and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå **Erreur inattendue**\n\nUne erreur s'est produite. Veuillez r√©essayer.\n\nSi le probl√®me persiste, utilisez /start pour red√©marrer.",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception:
                pass
    
    async def run_async(self):
        """D√©marre le bot de mani√®re asynchrone"""
        logger.info("üöÄ D√©marrage du bot Telegram CSS avanc√©...")
        
        # Cr√©ation de l'application
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # Initialisation de l'application
        await application.initialize()
        
        # Configuration des gestionnaires
        self.setup_handlers(application)
        
        # D√©marrage
        logger.info("‚úÖ Bot d√©marr√© avec succ√®s !")
        logger.info(f"üîó API CSS: {self.css_api_url}")
        logger.info(f"üíæ Cache: {'Redis' if self.cache_manager.redis_client else 'M√©moire'}")
        
        try:
            # D√©marrage du polling
            await application.start()
            await application.updater.start_polling(drop_pending_updates=True)
            
            # Maintenir le bot en vie
            await asyncio.Event().wait()
            
        except Exception as e:
            logger.error(f"Erreur lors du d√©marrage: {e}")
            raise
        finally:
            # Nettoyage
            await application.stop()
            await application.shutdown()
    
    def run(self):
        """D√©marre le bot (wrapper synchrone)"""
        try:
            asyncio.run(self.run_async())
        except KeyboardInterrupt:
            logger.info("üõë Arr√™t du bot demand√© par l'utilisateur")
        except Exception as e:
            logger.error(f"Erreur fatale dans run(): {e}")
            raise

def main():
    """Point d'entr√©e principal"""
    # Configuration de l'encodage pour √©viter les erreurs Unicode
    import sys
    if sys.platform == "win32":
        # Configuration plus s√ªre pour l'encodage UTF-8 sur Windows
        import locale
        try:
            # Essayer de configurer l'encodage UTF-8 sans d√©tacher les buffers
            if hasattr(sys.stdout, 'reconfigure'):
                sys.stdout.reconfigure(encoding='utf-8')
                sys.stderr.reconfigure(encoding='utf-8')
            else:
                # Fallback pour les versions plus anciennes de Python
                locale.setlocale(locale.LC_ALL, 'C.UTF-8')
        except (AttributeError, locale.Error):
            # Si la configuration √©choue, continuer sans modification
            pass
    
    # V√©rification des variables d'environnement
    if not TELEGRAM_TOKEN:
        print("Erreur: TELEGRAM_TOKEN non d√©fini")
        print("D√©finissez la variable d'environnement TELEGRAM_TOKEN")
        return
    
    if not CSS_API_URL:
        print("Erreur: CSS_API_URL non d√©fini")
        print("D√©finissez la variable d'environnement CSS_API_URL")
        return
    
    print("ü§ñ Bot Telegram CSS Avanc√©")
    print("=" * 30)
    print(f"üì° Token: {TELEGRAM_TOKEN[:10]}...")
    print(f"üîó API CSS: {CSS_API_URL}")
    print(f"üíæ Redis: {'‚úÖ Disponible' if REDIS_AVAILABLE else '‚ùå Non disponible'}")
    print(f"üêõ Debug: {'‚úÖ Activ√©' if DEBUG_MODE else '‚ùå D√©sactiv√©'}")
    print("=" * 30)
    
    # Cr√©ation et d√©marrage du bot
    bot = TelegramCSSBotAdvanced()
    
    try:
        bot.run()
    except KeyboardInterrupt:
        print("\nüõë Arr√™t du bot...")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        logger.error(f"Erreur fatale: {e}")

if __name__ == "__main__":
    main()
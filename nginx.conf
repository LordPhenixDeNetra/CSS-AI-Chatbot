# Configuration Nginx pour RAG Ultra Performant Multimodal API

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Configuration de base
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Optimisations de performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    
    # Upstream pour l'API RAG
    upstream rag_api {
        least_conn;
        server rag-api:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Upstream pour ChromaDB
    upstream chromadb {
        server chromadb:8000 max_fails=3 fail_timeout=30s;
    }
    
    # Upstream pour Prometheus
    upstream prometheus {
        server prometheus:9090 max_fails=3 fail_timeout=30s;
    }
    
    # Upstream pour Grafana
    upstream grafana {
        server grafana:3000 max_fails=3 fail_timeout=30s;
    }
    
    # Configuration SSL (à décommenter en production avec certificats)
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
    
    # Serveur principal - API RAG
    server {
        listen 80;
        server_name localhost;
        
        # Redirection HTTPS (à décommenter en production)
        # return 301 https://$server_name$request_uri;
        
        # Headers de sécurité
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # Health check
        location /health {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://rag_api/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # API endpoints
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://rag_api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            proxy_buffering off;
        }
        
        # Documentation
        location /docs {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://rag_api/docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # OpenAPI schema
        location /openapi.json {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://rag_api/openapi.json;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Upload endpoints avec limite spéciale
        location ~ ^/(upload|add_document|add_multimodal_document) {
            limit_req zone=upload burst=10 nodelay;
            client_max_body_size 100M;
            proxy_pass http://rag_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 60s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            proxy_request_buffering off;
        }
        
        # Tous les autres endpoints API
        location / {
            limit_req zone=api burst=30 nodelay;
            proxy_pass http://rag_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
    }
    
    # Serveur HTTPS (à décommenter en production)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     # Même configuration que le serveur HTTP
    #     # ...
    # }
    
    # ChromaDB Admin (accès restreint)
    server {
        listen 8001;
        server_name localhost;
        
        # Restriction d'accès (à adapter selon vos besoins)
        # allow 192.168.0.0/16;
        # allow 10.0.0.0/8;
        # deny all;
        
        location / {
            proxy_pass http://chromadb;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Prometheus (accès restreint)
    server {
        listen 9090;
        server_name localhost;
        
        # Restriction d'accès
        # allow 192.168.0.0/16;
        # allow 10.0.0.0/8;
        # deny all;
        
        location / {
            proxy_pass http://prometheus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Grafana
    server {
        listen 3000;
        server_name localhost;
        
        # Restriction d'accès
        # allow 192.168.0.0/16;
        # allow 10.0.0.0/8;
        # deny all;
        
        location / {
            proxy_pass http://grafana;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support pour Grafana
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
    
    # Page d'erreur personnalisée
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
    
    location = /404.html {
        root /usr/share/nginx/html;
    }
}
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test final avec le cas exact de l'utilisateur
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telegram_advanced import TelegramCSSBotAdvanced

def test_user_exact_case():
    """Test avec exactement le texte probl√©matique de l'utilisateur"""
    
    # Cr√©er une instance du bot
    bot = TelegramCSSBotAdvanced()
    
    print("=== Test du cas exact de l'utilisateur ===")
    print()
    
    # Le texte exact que l'utilisateur voit (avec guillemets au d√©but et √† la fin)
    user_problematic_text = '"Bonjour,\\n\\nLa s\\u00e9curit\\u00e9 informatique est un domaine crucial qui englobe la protection des syst\\u00e8mes, des r\\u00e9seaux et des donn\\u00e9es contre les menaces num\\u00e9riques. Voici les aspects essentiels :\\n\\n## 1. **Authentification et Contr\\u00f4le d\'Acc\\u00e8s**\\n\\n### Authentification Multi-Facteurs (MFA)\\n- **Quelque chose que vous savez** : mot de passe, PIN\\n- **Quelque chose que vous avez** : t\\u00e9l\\u00e9phone, token, carte \\u00e0 puce\\n- **Quelque chose que vous \\u00eates** : biom\\u00e9trie (empreinte, reconnaissance faciale)"'
    
    print("AVANT correction (ce que l'utilisateur voit):")
    print(repr(user_problematic_text))
    print()
    print("Affichage brut:")
    print(user_problematic_text)
    print()
    print("=" * 60)
    print()
    
    # Appliquer la correction
    corrected_text = bot.fix_unicode_encoding(user_problematic_text)
    
    print("APR√àS correction (ce que l'utilisateur devrait voir):")
    print(repr(corrected_text))
    print()
    print("Affichage final:")
    print(corrected_text)
    print()
    print("=" * 60)
    print()
    
    # V√©rifications
    print("‚úÖ V√âRIFICATIONS:")
    print(f"- Guillemets supprim√©s ? {not (corrected_text.startswith('"') and corrected_text.endswith('"'))}")
    print(f"- Plus de \\u00e9 ? {('\\u00e9' not in corrected_text)}")
    print(f"- Plus de \\n ? {('\\n' not in corrected_text)}")
    print(f"- Contient '√©' ? {('√©' in corrected_text)}")
    print(f"- Contient '√®' ? {('√®' in corrected_text)}")
    print(f"- Contient '√†' ? {('√†' in corrected_text)}")
    print(f"- Contient des retours √† la ligne ? {chr(10) in corrected_text}")
    print()
    
    # Test de longueur
    print(f"Longueur avant: {len(user_problematic_text)} caract√®res")
    print(f"Longueur apr√®s: {len(corrected_text)} caract√®res")
    print(f"R√©duction: {len(user_problematic_text) - len(corrected_text)} caract√®res")
    print()
    
    if all([
        not (corrected_text.startswith('"') and corrected_text.endswith('"')),
        '\\u00e9' not in corrected_text,
        '\\n' not in corrected_text,
        '√©' in corrected_text,
        chr(10) in corrected_text
    ]):
        print("üéâ SUCC√àS ! Le probl√®me de l'utilisateur est r√©solu !")
    else:
        print("‚ùå √âCHEC ! Le probl√®me persiste.")

if __name__ == "__main__":
    test_user_exact_case()